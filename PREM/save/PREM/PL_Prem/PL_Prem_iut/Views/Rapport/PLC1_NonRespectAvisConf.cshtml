@model RAMQ.PRE.PL_Prem_iut.Models.PLC1_ConsulterRappPrem.PLC1_NonRespAvisConf
@using OutilCommun = RAMQ.PRE.PRE_OutilComun_cpo;
@using RAMQ.PRE.PL_Prem_iut.Helpers

@Styles.Render("~/bundles/PLC1CSS")

@{
    ViewData["TitrePage"] = "Non respect de l'avis de conformité (article 9.01)";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div role="group" class="collection">
    <div class="row">
        <div class="col-md-2 col-sm-12 col-lg-2 col-xl-1">
            @Html.LabelFor(x => x.Annee)
            @Html.DropDownListFor(x => x.Annee, Model.ListAnnees, new { @class = "form-control" })
        </div>
@if (Model.EstDRMG == false)
{
        <div class="col-md-5 col-sm-12 col-lg-4 col-xl-3">
            @Html.LabelFor(x => x.Region)
            @Html.DropDownListFor(x => x.Region, Model.ListRegions, new { @class = "form-control" })
        </div>
        <div class="col-md-3 col-sm-12 col-lg-4 col-xl-6" id="divSousTerritoire">
            @Html.LabelFor(x => x.SousTerritoire)
            @Html.DropDownListFor(x => x.SousTerritoire, Model.ListSousTerritoires, (Model.Region == null ? (object)new { @class = "form-control", @disabled = "disabled" } : (object)new { @class = "form-control" }))
        </div>
}
else
{
    <div class="col-md-8 col-sm-12 col-lg-8 col-xl-9" id="divSousTerritoire">
        @Html.LabelFor(x => x.SousTerritoire)
        @Html.DropDownListFor(x => x.SousTerritoire, Model.ListSousTerritoires, (Model.Region == null ? (object)new { @class = "form-control", @disabled = "disabled" } : (object)new { @class = "form-control" }))
    </div>
}
    <div class="col-md-2 col-sm-12 col-lg-1 col-xl-2 col-btn">
        <br />
        <button id="AppliquerRecherche" name="TypeAction" class="btn btn-primary btn-success" type="submit" value="@OutilCommun.Constantes.TypeActionAvisConformite.Rechercher">
            <i class="fa fa-check" aria-hidden="true"></i>Appliquer
        </button>
    </div>
        
    </div>
    <div class="row">
        <div class="col-md-9">
@{
    var dateDuJour = DateTime.Now;
    if (dateDuJour >= Model.DateDebutRapport && dateDuJour <= Model.DateFinRapport)
    {
        <h3>Du @Model.DateDebutRapport.Value.ToString("dd MMMM yyyy") au @dateDuJour.ToString("dd MMMM yyyy")</h3>
        <p>Liste présentée à titre indicatif uniquement. Ces informations ne sont pas définitives.</p>
    }
    else
    {
        <h3>Du @Model.DateDebutRapport.Value.ToString("dd MMMM yyyy") au @Model.DateFinRapport.Value.ToString("dd MMMM yyyy")</h3>
    }
}
        </div>
        <div class="col-md-3" id="liensEnregistrement">
            <br />
            <i class="fa fa-print" aria-hidden="true"></i>
            <a href="#" id="BtnImprimer">Imprimer       </a>
            <i class="fa fa-file" aria-hidden="true"></i>
            <a href="#" class="dropdown-toggle" data-toggle="dropdown">Enregistrer</a>
            <ul class="dropdown-menu">
                <li>@Html.ActionLink("Enregistrer en PDF", "PLC1_NonRespectAvisConf_Pdf", new { Region = Model.Region, Annee = Model.Annee, SousTerritoire = Model.SousTerritoire })</li> 
                <li>@Html.ActionLink("Enregistrer en XML", "PLC1_NonRespectAvisConf_Xml", new { Region = Model.Region, Annee = Model.Annee, SousTerritoire = Model.SousTerritoire })</li>
            </ul>
        </div>
    </div>
    <br />
    <br />
    <div class="table-responsive">
        <table class="table table-striped dt-responsive tableRapport" id="DataTableAttente">
            <thead>
                <tr>
                    <th>
                        Numéro de pratique
                    </th>
                    <th>
                        Médecin
                    </th>
                    <th>
                        Région
                    </th>
                    <th>
                        Sous-territoire
                    </th>
                    <th>
                        Date de prise d'effet de l'avis
                    </th>
                    <th>
                        Date de fin de l'avis
                    </th>
                    <th title="Il s’agit de la facturation dans la région de la pénalité par rapport aux autres régions où le médecin à facturé, le cas échéant. Ce champ est en rouge si le % de facturation effectué se situe entre 50% et 54,9 %.">
                        % effectué
                    </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
        @*<p>Nombre total de médecins pour cette recherche: @Model.NombreDispensateursRetournes</p>*@
    </div>
</div>

}

@section ScriptsBasDepage
{
    @Scripts.Render("~/bundles/PLC1")
    <script type="text/javascript" nonce="@Html.ScriptNonce()">
    var donneesRapport = [];
    @foreach (var ligne in Model.LignesRapport)
    {
        <text>
        donneesRapport.push(["@ligne.NumeroPratique", "@ligne.Medecin", "@ligne.Region", "@ligne.SousTerritoire", "@(ligne.DatePriseEffetAvis.HasValue == true ? @ligne.DatePriseEffetAvis.Value.ToShortDateString() : "")", "@(ligne.DateFinAvis.HasValue == true ? @ligne.DateFinAvis.Value.ToShortDateString() : "")", "@ligne.PourcentageEffectue"]);
        </text>
    }

    //Chargement des données
    document.addEventListener("DOMContentLoaded", function (event) {
        var lienRedirection = "@Url.Action("PLC2_Avis", "ProfilProfessionnel", new { idProf = 12345 })";
        window.optionsDataTable.rowCallback = function (row, data, index) {
            if (data[0] != undefined) {
                $('td:eq(0)', row).html("<a href='" + lienRedirection.replace("12345",data[0].replace("-", "")) + "'>" + $('td:eq(0)', row).html() + "</a>");
            }
            if (data[6] != undefined && Number(data[6].replace(",", ".")) >= 50 && Number(data[6].replace(",", ".")) < 55) {
                $('td:eq(6)', row).addClass("pourcentageRouge");
            }
        }
        window.optionsDataTable.pageLength = 100;
        window.optionsDataTable.searching = false;
        var datatable = $('.tableRapport').DataTable(window.optionsDataTable);
        datatable.clear();
        datatable.rows.add(donneesRapport);
        datatable.draw();
    });

    var urlObtentionTerri = '@Url.Action("ObtenirTerritoires", "Rapport")'; // Don't hard code your url's!
    var sousTerritoire = $('#SousTerritoire');
    $("#Region").change(function () {
        var idRegion = $(this).val();
        //console.log(idRegion);
        if (idRegion != "") {
            var annee = $('#Annee').val();
            $.getJSON(urlObtentionTerri, { codeRss: idRegion, anneePrem: annee }, function (response) {
                $('#SousTerritoire').empty(); // remove any existing options
                $.each(response, function (index, item) {
                    $('#SousTerritoire').append($('<option></option>').text(item.Text).val(item.Value));
                });
                $('#SousTerritoire').prop("disabled", false);
                //$('#SousTerritoire').attr("class", "form-control form-control-non-auto");
            });
        }
        else {
            $('#SousTerritoire').val("");
            $('#SousTerritoire').prop("disabled", "disabled");
            //$('#SousTerritoire').attr("class", "form-control");
        }
    });



    </script>
}
