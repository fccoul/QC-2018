<?xml version="1.0"?>
<doc>
<assembly>
<name>
RAMQ.COM.COC2_V4FournAccesDonne_cpo
</name>
</assembly>
<members>
<member name="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra">
 <summary> 
     Cette classe permet d'accéder à une base de données Oracle et d'effectuer des opérations sur ses objets. La classe se veut une version 
     étendue de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> puisqu'elle expose davantage de fonctionnalités. Elle permet entre autre 
     la gestion automatisée des transactions et facilite l'appel de procédures stockées Oracle. Cette classe expose la propriété 
     <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> de type <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" />.
 </summary>
 <remarks>
 
  Auteur : Pierre Deblois <br/>
  Date   : 2012-03-05
 <br/>
  Historique des modifications<br/>
  ------------------------------------------------------------------------------<br/>
  Auteur : [Auteur]<br/>
  Date   : [aaaa-mm-jj]<br/>
  Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.NbrMaxOccTablo">
 <summary>
 Nombre maximum d'occurences d'items d'un tableau (PL/SQL Associative Array).
 </summary>
 <value></value>
 <returns>Nombre maximum par défaut d'occurences d'items d'un tableau si jamais redéfini ou
 le nombre maximum redéfini si supérieur à zéro et s'il ne dépasse pas la valeur maximale autorisée.</returns>
 <remarks></remarks>
 <exception cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra">La valeur de NbrMaxOccTablo excède {0}.
 </exception>"
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String)">
 <summary>
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le code d'application (PPP), le numéro de l'erreur imprévue et le nom du fichier UDL.
 </summary>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_strNomFichUdl">Nom du fichier UDL avec ou sans le chemin pour se connecter à la base de données</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
      Par défaut la gestion automatique de la transaction est activée avec ce constructeur.
    </para>
 <h3>Fichier UDL</h3><para>
	    Le paramètre <paramref name="_strNomFichUdl" /> peut ou ne pas contenir le chemin du fichier UDL. Si le chemin n'est pas spécifié et que 
	    le fichier a le format <b><i>&lt;PPP&gt;_&lt;SGBD&gt;.UDL</i></b>, le constructeur le cherche par défaut dans <b><i>D:\AuthnDonne\&lt;PPP&gt;\</i></b>. 
	    Notez bien que <b><i>&lt;SGBD&gt;</i></b> est <b><i>ORA</i></b> si par exemple on se connecte à une base de données Oracle.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrAjouParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrAjouParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le nom de la procédure stockée, le code d'application (PPP), 
     le numéro de l'erreur imprévue et le nom du fichier UDL.
 </summary>
 <param name="_strNomProc">Nom de la procédure stockée</param>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_strNomFichUdl">Nom du fichier UDL avec ou sans le chemin pour se connecter à la base de données</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
      Par défaut la gestion automatique de la transaction est activée avec ce constructeur.
    </para>
 <h3>Fichier UDL</h3><para>
	    Le paramètre <paramref name="_strNomFichUdl" /> peut ou ne pas contenir le chemin du fichier UDL. Si le chemin n'est pas spécifié et que 
	    le fichier a le format <b><i>&lt;PPP&gt;_&lt;SGBD&gt;.UDL</i></b>, le constructeur le cherche par défaut dans <b><i>D:\AuthnDonne\&lt;PPP&gt;\</i></b>. 
	    Notez bien que <b><i>&lt;SGBD&gt;</i></b> est <b><i>ORA</i></b> si par exemple on se connecte à une base de données Oracle.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrStrAjouParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrStrAjouParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Boolean)">
 <summary>
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le code d'application (PPP), le numéro de l'erreur imprévue, 
     le nom du fichier UDL et une valeur de type <see cref="T:System.Boolean" /> qui active la gestion automatique de la transaction.
 </summary>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_strNomFichUdl">Nom du fichier UDL avec ou sans le chemin pour se connecter à la base de données</param>
 <param name="_blnGestTrxAuto">Active la gestion automatique de la transaction</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
  	  Si l'argument <paramref name="_blnGestTrxAuto" /> de ce constructeur est à <c>True</c>, alors la gestion automatique de la transaction est 
      activée. S'il est à <c>False</c>, alors elle ne l'est pas.
    </para>
 <h3>Fichier UDL</h3><para>
	    Le paramètre <paramref name="_strNomFichUdl" /> peut ou ne pas contenir le chemin du fichier UDL. Si le chemin n'est pas spécifié et que 
	    le fichier a le format <b><i>&lt;PPP&gt;_&lt;SGBD&gt;.UDL</i></b>, le constructeur le cherche par défaut dans <b><i>D:\AuthnDonne\&lt;PPP&gt;\</i></b>. 
	    Notez bien que <b><i>&lt;SGBD&gt;</i></b> est <b><i>ORA</i></b> si par exemple on se connecte à une base de données Oracle.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrBlnOdp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrBlnOdp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le nom de la procédure stockée, le code d'application (PPP), le numéro de l'erreur imprévue, 
     le nom du fichier UDL et une valeur de type <see cref="T:System.Boolean" /> qui active la gestion automatique de la transaction.
 </summary>
 <param name="_strNomProc">Nom de la procédure stockée</param>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_strNomFichUdl">Nom du fichier UDL avec ou sans le chemin pour se connecter à la base de données</param>
 <param name="_blnGestTrxAuto">Active la gestion automatique de la transaction</param>
 <remarks>        
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
  	  Si l'argument <paramref name="_blnGestTrxAuto" /> de ce constructeur est à <c>True</c>, alors la gestion automatique de la transaction est 
      activée. S'il est à <c>False</c>, alors elle ne l'est pas.
    </para>
 <h3>Fichier UDL</h3><para>
	    Le paramètre <paramref name="_strNomFichUdl" /> peut ou ne pas contenir le chemin du fichier UDL. Si le chemin n'est pas spécifié et que 
	    le fichier a le format <b><i>&lt;PPP&gt;_&lt;SGBD&gt;.UDL</i></b>, le constructeur le cherche par défaut dans <b><i>D:\AuthnDonne\&lt;PPP&gt;\</i></b>. 
	    Notez bien que <b><i>&lt;SGBD&gt;</i></b> est <b><i>ORA</i></b> si par exemple on se connecte à une base de données Oracle.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrStrBlnFinAppelProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrStrBlnFinAppelProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)">
 <summary>
     <b>Normalement éviter ce constructeur, car il exige de spécifier les paramètres de connexion (voir remarque).</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le code d'application (PPP), le numéro de l'erreur imprévue 
     et l'instance de connexion à la base de données Oracle qui implémente l'interface <see cref="T:System.Data.IDbConnection" />.
 </summary>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_cnnOra">Instance de connexion à la base de données Oracle</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
      Par défaut la gestion automatique de la transaction est activée avec ce constructeur.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 <h3>Constructeurs avec paramètres de connexion</h3><para>
      Normalement <b>éviter un des constructeurs suivants</b>, car ils spécifient les <b>paramètres de connexion</b> d'une instance implémentant 
      l'interface <see cref="T:System.Data.IDbConnection" /> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      La <b>pratique recommandée à la RAMQ</b> est plutôt d'utiliser l'un des constructeurs qui spécifient le nom d'un <b>fichier UDL</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Boolean)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String,System.Boolean)" />;</li>
      </ul>      
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrCnn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrCnn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)">
 <summary>
     <b>Normalement éviter ce constructeur, car il exige de spécifier les paramètres de connexion (voir remarque).</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le nom de la procédure stockée, le code d'application (PPP), 
     le numéro de l'erreur imprévue et l'instance de connexion à la base de données Oracle qui implémente l'interface <see cref="T:System.Data.IDbConnection" />.
 </summary>
 <param name="_strNomProc">Nom de la procédure stockée</param>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_cnnOra">Instance de connexion à la base de données Oracle</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
      Par défaut la gestion automatique de la transaction est activée avec ce constructeur.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 <h3>Constructeurs avec paramètres de connexion</h3><para>
      Normalement <b>éviter un des constructeurs suivants</b>, car ils spécifient les <b>paramètres de connexion</b> d'une instance implémentant 
      l'interface <see cref="T:System.Data.IDbConnection" /> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      La <b>pratique recommandée à la RAMQ</b> est plutôt d'utiliser l'un des constructeurs qui spécifient le nom d'un <b>fichier UDL</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Boolean)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String,System.Boolean)" />;</li>
      </ul>      
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrCnn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrCnn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)">
 <summary>
     <b>Normalement éviter ce constructeur, car il exige de spécifier les paramètres de connexion (voir remarque).</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le code d'application (PPP), le numéro de l'erreur imprévue, 
     l'instance de connexion à la base de données Oracle qui implémente l'interface <see cref="T:System.Data.IDbConnection" /> et une valeur de type 
     <see cref="T:System.Boolean" /> qui active la gestion automatique de la transaction.
 </summary>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_cnnOra">Instance de connexion à la base de données Oracle</param>
 <param name="_blnGestTrxAuto">Active la gestion automatique de la transaction</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
  	  Si l'argument <paramref name="_blnGestTrxAuto" /> de ce constructeur est à <c>True</c>, alors la gestion automatique de la transaction est 
      activée. S'il est à <c>False</c>, alors elle ne l'est pas.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 <h3>Constructeurs avec paramètres de connexion</h3><para>
      Normalement <b>éviter un des constructeurs suivants</b>, car ils spécifient les <b>paramètres de connexion</b> d'une instance implémentant 
      l'interface <see cref="T:System.Data.IDbConnection" /> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      La <b>pratique recommandée à la RAMQ</b> est plutôt d'utiliser l'un des constructeurs qui spécifient le nom d'un <b>fichier UDL</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Boolean)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.String,System.Boolean)" />;</li>
      </ul>      
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrCnnBln" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrCnnBln" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)">
 <summary>
     <b>Normalement éviter ce constructeur, car il exige de spécifier les paramètres de connexion (voir remarque).</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le nom de la procédure stockée, le code d'application (PPP), 
     le numéro de l'erreur imprévue, l'instance de connexion à la base de données Oracle qui implémente l'interface <see cref="T:System.Data.IDbConnection" /> 
     et une valeur booléenne qui active la gestion automatique de la transaction.
 </summary>
 <param name="_strNomProc">Nom de la procédure stockée</param>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <param name="_cnnOra">Instance de connexion à la base de données Oracle</param>
 <param name="_blnGestTrxAuto">Active la gestion automatique de la transaction</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
  	  Si l'argument <paramref name="_blnGestTrxAuto" /> de ce constructeur est à <c>True</c>, alors la gestion automatique de la transaction est 
      activée. S'il est à <c>False</c>, alors elle ne l'est pas.
    </para>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      Quand on appelle ce constructeur, on affecte le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution 
      de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception 
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrCnnBln" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrCnnBln" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,RAMQ.AccesDonnees.BDOracle.IOracleOdp,RAMQ.AccesDonnees.BDOracle.IProcOra,RAMQ.AccesDonnees.ITraitementErreur,System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
     <b>Constructeur pour les tests unitaires.</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le nom de la procédure stockée, l'instance pour accéder aux données 
     Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" />, l'instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" />, l'instance pour traiter les 
     erreurs <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" />, la collection des paramètres de sortie et la collection des valeurs des paramètres de sortie.
 </summary>
 <param name="_strNomProc">Nom de la procédure stockée</param>
 <param name="_objIOracleOdp">Instance pour accéder aux données Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" /></param>
 <param name="_objIProcOra">Instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" /></param>
 <param name="_objITraitementErreur">Instance pour traiter les erreurs <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" /></param>
 <param name="_colctParamSorti">Collection des paramètres de sortie</param>
 <param name="_colctValParamSorti">Collection des valeurs des paramètres de sortie</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
      Par défaut la gestion automatique de la transaction est activée avec ce constructeur.
    </para>
 </remarks>        
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrObjObjObjColctColct" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrObjObjObjColctColct" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(RAMQ.AccesDonnees.BDOracle.IOracleOdp,RAMQ.AccesDonnees.BDOracle.IProcOra,RAMQ.AccesDonnees.ITraitementErreur,System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
     <b>Constructeur pour les tests unitaires.</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant l'instance pour accéder aux données Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" />, 
     l'instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" />, l'instance pour traiter les erreurs <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" />, 
     la collection des paramètres de sortie et la collection des valeurs des paramètres de sortie.
 </summary>
 <param name="_objIOracleOdp">Instance pour accéder aux données Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" /></param>
 <param name="_objIProcOra">Instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" /></param>
 <param name="_objITraitementErreur">Instance pour traiter les erreurs <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" /></param>
 <param name="_colctParamSorti">Collection des paramètres de sortie</param>
 <param name="_colctValParamSorti">Collection des valeurs des paramètres de sortie</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
      Par défaut la gestion automatique de la transaction est activée avec ce constructeur.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraObjObjObjColctColct" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraObjObjObjColctColct" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(RAMQ.AccesDonnees.BDOracle.IOracleOdp,RAMQ.AccesDonnees.BDOracle.IProcOra,RAMQ.AccesDonnees.ITraitementErreur,System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
 <summary>
     <b>Constructeur pour les tests unitaires.</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant l'instance pour accéder aux données Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" />, 
     l'instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" />, l'instance pour traiter les erreurs <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" />, 
     la collection des paramètres de sortie, la collection des valeurs des paramètres de sortie et une valeur de type <see cref="T:System.Boolean" /> qui active la gestion automatique 
     de la transaction.
 </summary>
 <param name="_objIOracleOdp">Instance pour accéder aux données Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" /></param>
 <param name="_objIProcOra">Instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" /></param>
 <param name="_objITraitementErreur">Instance pour traiter les erreurs <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" /></param>
 <param name="_colctParamSorti">Collection des paramètres de sortie</param>
 <param name="_colctValParamSorti">Collection des valeurs des paramètres de sortie</param>
 <param name="_blnGestTrxAuto">Active la gestion automatique de la transaction</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
  	  Si l'argument <paramref name="_blnGestTrxAuto" /> de ce constructeur est à <c>True</c>, alors la gestion automatique de la transaction est 
      activée. S'il est à <c>False</c>, alors elle ne l'est pas.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraObjObjObjColctColctBln" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraObjObjObjColctColctBln" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,RAMQ.AccesDonnees.BDOracle.IOracleOdp,RAMQ.AccesDonnees.BDOracle.IProcOra,RAMQ.AccesDonnees.ITraitementErreur,System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
 <summary>
     <b>Constructeur pour les tests unitaires.</b><br />
     Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> en spécifiant le nom de la procédure stockée, l'instance pour accéder aux données Oracle 
     <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" />, l'instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" />, l'instance pour traiter les erreurs 
     <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" />, la collection des paramètres de sortie, la collection des valeurs des paramètres de sortie et 
     une valeur de type <see cref="T:System.Boolean" /> qui active la gestion automatique de la transaction.
 </summary>
 <param name="_strNomProc">Nom de la procédure stockée</param>
 <param name="_objIOracleOdp">Instance pour accéder aux données Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" /></param>
 <param name="_objIProcOra">Instance pour appeler la procédure stockée Oracle <see cref="T:RAMQ.AccesDonnees.BDOracle.IProcOra" /></param>
 <param name="_objITraitementErreur">Instance pour traiter les erreurs <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" /></param>
 <param name="_colctParamSorti">Collection des paramètres de sortie</param>
 <param name="_colctValParamSorti">Collection des valeurs des paramètres de sortie</param>D:\Travail\tfs-vs2010\RMQ\EspaTrav\U6072\COC2_V4FournAccesDonneDoc\COC2_V4FournAccesDonneEx_cns\COC2_V4FournAccDonnOraEx_cns.suo
 <param name="_blnGestTrxAuto">Active la gestion automatique de la transaction</param>
 <remarks>
 <para>
      Lorsque la gestion automatique est activée par le constructeur, l'ouverture et la fermerture de la connexion à la base de données Oracle est gérée 
      automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui exécute la procédure stockée Oracle. Cependant,
      l'ouverture et la fermeture de la connexion n'est pas gérée automatiquement par la méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> 
      qui exécute la procédure stockée si une connexion implémentant l'interface <see cref="T:System.Data.IDbConnection" /> a été spécifiée comme argument de l'un des 
      constructeurs suivants :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>        
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.#ctor(System.String,System.String,System.String,System.Data.IDbConnection,System.Boolean)" />;</li>
      </ul>
    </para><para>
      Lorsque la gestion automatique n'est pas activée par le constructeur, il faut ouvrir la connexion à la base de données Oracle manuellement. 
      La méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn" /> permet d'ouvrir la connexion à la base de données Oracle et la méthode 
      <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn" /> permet de la fermer. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> 
      de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />.
    </para><para>
      Dans tous les cas, il n'est pas obligatoire de fermer la connexion à la base de données Oracle. La fermeture de la connexion est faite automatiquement 
      lorsque l'on dispose de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété 
      <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique est activée par le constructeur, il faut employer l'une des méthodes d'exécution suivantes 
      pour appeler la procédure stockée :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" />;</li>
      </ul>
      Ces méthodes d'exécution ont un argument délégué d'une fonction de rappel ("callback") .NET de type <see cref="T:System.Func{System.Boolean}" />ou 
      <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" />qui renvoie une valeur <see cref="T:System.Boolean" />. 
    </para><para>
      Si l'argument délégué de la méthode d'exécution n'est pas nul, alors la transaction débute dès que la méthode d'exécution est appelée. Juste après l'appel de la procédure 
      stockée Oracle et juste avant la fin de la transaction, si l'argument délégué de la méthode d'exécution n'est pas nul, alors la fonction de rappel est lancée par la 
      méthode d'exécution. Selon la valeur <see cref="T:System.Boolean" /> retournée par la fonction de rappel, la méthode d'exécution détermine si la transaction se termine 
      ou est annulée.
    </para><para>
      La fonction de rappel .NET peut servir à accomplir un traitement particulier juste avant la fin de la transaction, par exemple obtenir les paramètres de la 
      procédure stockée Oracle pour effectuer un calcul ou afficher les informations dans une interface.
    </para><para>
      Dans un contexte transactionnel si la gestion automatique n'est pas activée, il faut employer une méthode d'exécution qui n'a pas un argument délégué d'une fonction de rappel .NET 
      de type <see cref="T:System.Func{System.Boolean}" />ou <see cref="T:System.Func{System.Collections.Generic.IEnumerable{RAMQ.Message.MsgTrait},System.Boolean}" /> 
      ou encore, employer une méthode d'exécution dont l'argument délégué de fonction est assigné à <c>Nothing</c> (VB) ou <c>null</c> (C#). Il faut également débuter la transaction manuellement 
      à l'aide de la méthode <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />, la terminer à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" /> 
      ou l'annuler à l'aide de <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" />. Ces méthodes sont exposées par la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> référencée par la propriété <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" />.
	  </para>
 <h3>Gestion automatique de la transaction</h3><para>
  	  Si l'argument <paramref name="_blnGestTrxAuto" /> de ce constructeur est à <c>True</c>, alors la gestion automatique de la transaction est 
      activée. S'il est à <c>False</c>, alors elle ne l'est pas.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamTimeStamp(System.String,System.Nullable{System.DateTime},System.Data.ParameterDirection)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamTimeStamp(System.String,System.Nullable{System.DateTime})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamEntre``1(System.String,``0)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamEntreTablo``1(System.String,System.Collections.Generic.IEnumerable{``0})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamEntreSorti``1(System.String,``0)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamEntreSortiTablo``1(System.String,System.Collections.Generic.IEnumerable{``0})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamSorti``1(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamSortiTablo``1(System.String,System.Int32)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamRefCursorSorti(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamCodRetou(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.AjoutParamCodRetouTablo(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ObtenirParamSorti``1(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProc">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProc``1(``0)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProc``2(``0,System.Boolean)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcContx``1">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcContx``2(``0)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProc``1">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProc``1(System.Boolean)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProc``2(``0)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.NouvProc(System.String,System.String,System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.FinAppelProc">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcIntrn``2(``0,System.Func{System.Boolean},System.Func{``1,System.Boolean})">
 <summary>
     Permet d'exécuter une procédure stockée avec la possibilité de démarrer une transaction avec l'aide d'un contexte.
 </summary>
 <typeparam name="TParamEntre">Type de la classe d'entrée.</typeparam>
 <typeparam name="TListeMsgTrait">Type représentant la collection de message de traitement à passer à la fonction en paramètre.</typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée.</param>
 <param name="_fctExecTraitTrxMsgTrait">Fonction qui détermine si l'on doit démarrer une transaction avec une collection de message de traitement en paramètre.</param>
 <returns>Collection de messages de traitement.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.FinaliserProcIntrn">
 <summary>
 Finaliser l'appel à la procédure
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.DemarrerGestTrx``1(System.Func{System.Boolean},System.Func{``0,System.Boolean})">
 <summary>
 Démarrer la gestion de la transaction
 </summary>
 <typeparam name="TListeMsgTrait">Type représentant la collection de message de traitement à passer à la fonction en paramètre.</typeparam>
 <param name="_fctExecTraitTrx">Fonction qui détermine si l'on accepter ou refuser la transaction</param>
 <param name="_fctExecTraitTrxMsgTrait">Fonction qui détermine si l'on doit démarrer une transaction avec une collection de message de traitement en paramètre.</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.TerminerGestTrx``1(``0@,System.Func{System.Boolean},System.Func{``0,System.Boolean})">
 <summary>
 Terminer la gestion de la transaction
 </summary>
 <typeparam name="TListeMsgTrait">Type représentant la collection de message de traitement à passer à la fonction en paramètre.</typeparam>
 <param name="_objColctMsgTrait">Collection de message de traitement</param>
 <param name="_fctExecTraitTrx">Fonction qui détermine si l'on accepter ou refuser la transaction</param>
 <param name="_fctExecTraitTrxMsgTrait">Fonction qui détermine si l'on doit démarrer une transaction avec une collection de message de traitement en paramètre.</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ExecuterProcIntrn``2(``0,System.Boolean)">
 <summary>
     Permet d'exécuter une procédure stockée.
 </summary>
 <typeparam name="TParamEntre">Type de la classe d'entrée.</typeparam>
 <typeparam name="TParamSorti">Type qui hérite de la classe ParamSorti.</typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée.</param>
 <param name="_blnForceRetouParamSorti">force le retour de l'instance de sortie en cas de message de traitement avec code erreur ou sévère.</param>
 <returns>Instance d'une classe qui hérite de la classe de base ParamSorti.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.TraiterCodRetou(System.Collections.Generic.List{System.String})">
 <summary>
     Permet de traiter les codes de retour d'oracle.
 </summary>
 <param name="_colctCodRetou">Collection de code de retour sous forme de chaîne de caractères.</param>
 <returns>Collection de messages de traitement.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ObtenirParamSorti(RAMQ.AccesDonnees.BDOracle.IOracleOdp@)">
 <summary>
 Permet d'obtenir la valeur de tout les paramètres de sorti de la procédure stockée.
 </summary>
 <param name="_objIOracleOdp">Instance de l'interface IOracleOdp.</param>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ObtenirTypOrac(System.Type)">
 <summary>
     Permet d'obtenir le type oracle correspondant à un type .NET.
 </summary>
 <param name="_objTyp">Type .NET.</param>
 <returns>Type oracle.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ObtenirLngChamp(System.Type)">
 <summary>
     Permet d'obtenir la longueur d'un champ selon un type .NET.
 </summary>
 <param name="_objTyp">Type .NET.</param>
 <returns>Longueur du champ.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ObtenirValChamp``1(System.Object)">
 <summary>
     Permet d'obtenir la valeur d'un champ.
 </summary>
 <typeparam name="T">Type du paramètre.</typeparam>
 <param name="_objChamp">Valeur du paramètre.</param>
 <returns>La valeur du champ.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ObtenirLngChamp``1(``0)">
 <summary>
     Permet d'obtenir la longueur d'un champ selon une valeur passé en paramètre.
 </summary>
 <typeparam name="T">Type du paramètre.</typeparam>
 <param name="_objChamp">Valeur du paramètre.</param>
 <returns>Longueur du champ.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ObtenirLngChamp``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Permet d'obtenir la longueur d'un champ selon une collection de valeurs passé en paramètre.
 </summary>
 <typeparam name="T">Type du paramètre.</typeparam>
 <param name="_colctChamps">Collection de valeurs.</param>
 <returns>Longueur du champ.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.TraiterParam``2(``0)">
 <summary>
     Permet de traiter les paramètres d'entrés.
 </summary>
 <typeparam name="TParamEntre">Type de la classe d'entrée.</typeparam>
 <typeparam name="TParamSorti">Type de la classe de sortie.</typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée.</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.TraiterParamSorti``1">
 <summary>
     Permet de traiter les paramètres de sorti.
 </summary>
 <typeparam name="T">Type de la classe de sorti.</typeparam>
 <returns>Instance de la classe de sorti.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ChangerTraitementErreur(System.String,System.String)">
 <summary>
 Changer le traitement de l'erreur de l'appel à une nouvelle procédure
 </summary>
 <param name="_strCodAppli"></param>
 <param name="_strNoMsgErrImprv"></param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ValiderFichUdl(System.String)">
 <summary>
     Valider la présence du nom du fichier UDL.
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL.</param>
 <returns>Le nom du fichier UDL si valide.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.ValiderConxn(System.Data.IDbConnection)">
 <summary>
     Valider la présence d'une instance de connexion oracle.
 </summary>
 <param name="_cnnOra">Instance d'une connexion oracle.</param>
 <returns>Instance d'une connexion Oracle.</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Dispose(System.Boolean)">
 <summary>                                                
 Libère toutes les ressources de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />. Cette méthode protégée ne peut être 
 appelée que par la méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Dispose" /> de la classe 
 <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui implémente la méthode <see cref="M:System.IDisposable.Dispose" /> de l'interface 
 <see cref="T:System.IDisposable" />. Cette méthode protégée permet d'éviter les appels redondants lors de la libération des ressources.
 </summary>
 <param name="disposing"><c>True</c> pour pouvoir libérer les ressources</param>
 <remarks>
 <para>
      Dès qu'une classe telle <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> implémente l'interface <see cref="T:System.IDisposable" />, l'utilisation 
      d'un bloc <c>Using ... End Using</c> est fortement recommandée lors de l'instanciation. Ceci permet de s'assurer que toutes les instances d'attributs privés 
      ou de propriétés publiques de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> sont libérées proprement et que la connexion à la base de données 
      est bien fermée.
    </para><para>
      Prenez note qu'après avoir créé une instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> si une exception survient et qu'une connexion
      a été ouverte ou qu'une transaction est en cours, la connexion ne sera pas fermée et la transaction ne sera pas arrêtée tant que la libération de
      l'instance ne sera pas faite à l'appel de <see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Dispose" />.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Dispose">
 <summary>
 Libère toutes les ressources de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />. Cette méthode implémente
 la méthode <see cref="M:System.IDisposable.Dispose" /> de l'interface <see cref="T:System.IDisposable" />. Elle appelle 
 <see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Dispose(System.Boolean)" />.
 </summary>
 <remarks>
 <para>
 Le code source de cette méthode a été ajouté par Visual Basic pour permettre l'implémentation correcte du modèle pouvant être supprimé.
 </para>
 <para>
      Dès qu'une classe telle <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> implémente l'interface <see cref="T:System.IDisposable" />, l'utilisation 
      d'un bloc <c>Using ... End Using</c> est fortement recommandée lors de l'instanciation. Ceci permet de s'assurer que toutes les instances d'attributs privés 
      ou de propriétés publiques de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> sont libérées proprement et que la connexion à la base de données 
      est bien fermée.
    </para><para>
      Prenez note qu'après avoir créé une instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> si une exception survient et qu'une connexion
      a été ouverte ou qu'une transaction est en cours, la connexion ne sera pas fermée et la transaction ne sera pas arrêtée tant que la libération de
      l'instance ne sera pas faite à l'appel de <see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Dispose" />.
    </para>
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.Erreur.NamespaceDoc">
 <summary>
 Cet espace de nom contient une classe qui permet de définir un code de retour d'une procédure stockée Oracle
 (<see cref="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour" />).
 </summary>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour">
 <summary> 
 Cette classe définit le code de retour d'une procédure stockée Oracle.
 </summary>
 <remarks>
 Auteur : Pierre Deblois <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour.intCodMsg">
 <summary>
 Code de message du code de retour <see cref="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour" />.
 </summary>
</member>
<member name="F:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour.colctParam">
 <summary>
 Collection des paramètres du code de retour <see cref="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour" />.
 </summary>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour.#ctor(System.String,System.Char)">
 <summary>
 Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour" /> en spécifiant le code de message avec ses paramètres 
 et le séparateur entre chacun des paramètres du code de retour.
 </summary>
 <param name="_strCodRet">Code de retour</param>
 <param name="_chrSepar">Séparateur entre chacun des paramètres du code de retour</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour.CodMsg">
 <summary>
 Permet l'accès au code de message du code de retour <see cref="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour" />.
 </summary>
 <returns>Le code de retour</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour.Param">
 <summary>
 Permet l'accès à la collection des paramètres du code de retour <see cref="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour" /> .
 </summary>
 <returns>Collection des paramètres du code de retour <see cref="T:RAMQ.AccesDonnees.BDOracle.Erreur.CodeRetour" /></returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra">
 <summary> 
     Cette interface définit comment accéder à une base de données Oracle et effectuer des opérations sur ses objets. L'interface se veut une version 
     étendue de <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" /> puisqu'elle expose davantage de fonctionnalités. Elle permet entre autre la 
     gestion automatisée des transactions et facilite l'appel de procédures stockées Oracle. Cette interface définit la propriété 
     <see cref="P:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Odp" /> de type <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" />.
 </summary>
 <remarks>
  Auteur : Pierre Deblois <br/>
  Date   : 2012-03-05
 <br/>
  Historique des modifications<br/>
  ------------------------------------------------------------------------------<br/>
  Auteur : [Auteur]<br/>
  Date   : [aaaa-mm-jj]<br/>
  Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.Odp">
 <summary>
 Permet l'accès au fournisseur de données Oracle ODP (Oracle Data Provider) 
 pour se connecter à une base de données Oracle et effectuer des opérations sur ses objets.
 </summary>
 <value>Fournisseur de données Oracle ODP (Oracle Data Provider)</value>
 <returns>Fournisseur de données Oracle ODP (Oracle Data Provider)</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrBlnOdp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrBlnOdp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)">
 <summary>
 Ajoute le paramètre d'une procédure stockée Oracle, en spécifiant les arguments suivants : le type du paramètre, son nom et sa direction.
 </summary>
 <typeparam name="T">Type du paramètre</typeparam>
 <param name="_strNomParam">Nom du paramètre tel qu'indiqué dans la procédure stockée</param>
 <param name="_prmDirtn">Direction du paramètre</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamObtnParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamObtnParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)">
 <summary>
 Ajoute le paramètre d'une procédure stockée Oracle, en spécifiant les arguments suivants : le type du paramètre, son nom, sa valeur et sa direction.
 </summary>
 <typeparam name="T">Type du paramètre</typeparam>
 <param name="_strNomParam">Nom du paramètre tel qu'indiqué dans la procédure stockée</param>
 <param name="_objParam">Valeur du paramètre</param>
 <param name="_prmDirtn">Direction du paramètre</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamObtnParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamObtnParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTimeStamp(System.String,System.Nullable{System.DateTime},System.Data.ParameterDirection)">
 <summary>
 Ajoute le paramètre d'une procédure stockée Oracle dont le type est <see cref="F:Oracle.DataAccess.Client.OracleDbType.TimeStamp">Oracle.DataAccess.Client.OracleDbType.TimeStamp</see> 
 (date, heure, minutes, secondes et fractions de secondes), en spécifiant les arguments suivants : le nom du paramètre TimeStamp, sa valeur et sa direction.
 </summary>
 <param name="_strNomParam">Nom du paramètre TimeStamp tel qu'indiqué dans la procédure stockée</param>
 <param name="_objValeur">Valeur du paramètre qui peut être nulle</param>
 <param name="_prmDirtn">Direction du paramètre</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamTimeStamp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamTimeStamp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTimeStamp(System.String,System.Nullable{System.DateTime})">
 <summary>
 Ajoute le paramètre entrant d'une procédure stockée dont le type Oracle est <see cref="F:Oracle.DataAccess.Client.OracleDbType.TimeStamp">Oracle.DataAccess.Client.OracleDbType.TimeStamp</see> 
 (date, heure, minutes, secondes et fractions de secondes), en spécifiant les arguments suivants : le nom du paramètre TimeStamp et sa valeur.
 </summary>
 <param name="_strNomParam">Nom du paramètre TimeStamp tel qu'indiqué dans la procédure stockée</param>
 <param name="_objValeur">Valeur du paramètre qui peut être nulle</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamTimeStamp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamTimeStamp" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)">
 <summary>
     Ajoute le paramètre d'une procédure stockée Oracle dont le type est un tableau Oracle, en spécifiant les arguments suivants : le type des occurences du paramètre tableau, 
     le nom du paramètre tableau, son nombre d'occurences et sa direction. 
 </summary>
 <typeparam name="T">Type des occurences du paramètre tableau</typeparam>
 <param name="_strNomParam">Nom du paramètre tableau tel qu'indiqué dans la procédure stockée</param>
 <param name="_intNbrOcc">Nombre d'occurences du paramètre tableau</param>
 <param name="_prmDirtn">Direction du paramètre tableau</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamTabloNbrOcc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamTabloNbrOcc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)">
 <summary>
     Ajoute le paramètre d'une procédure stockée Oracle dont le type est un tableau Oracle, en spécifiant les arguments suivants : le type des occurences du paramètre tableau, 
     le nom du paramètre tableau, la collection correspondant à celui-ci et sa direction.  
 </summary>
 <typeparam name="T">Type des occurences du paramètre tableau</typeparam>
 <param name="_strNomParam">Nom du paramètre tableau tel qu'indiqué dans la procédure stockée</param>
 <param name="_colctParam">Collection des occurences du paramètre tableau</param>
 <param name="_prmDirtn">Direction du paramètre tableau</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamTabloAjouParamRefCursorSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamTabloAjouParamRefCursorSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamEntre``1(System.String,``0)">
 <summary>
     Ajoute le paramètre entrant d'une procédure stockée Oracle, en spécifiant les arguments suivants : le type du paramètre entrant, son nom et sa valeur.
 </summary>
 <typeparam name="T">Type du paramètre entrant</typeparam>
 <param name="_strNomParam">Nom du paramètre entrant tel qu'indiqué dans la procédure stockée</param>
 <param name="_objParam">Valeur du paramètre</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrAjouParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrAjouParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamEntreTablo``1(System.String,System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Ajoute le paramètre entrant de procédure stockée Oracle dont le type est un tableau Oracle <see cref="F:Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray">
     Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray</see>, en spécifiant les arguments suivants : le type des occurences du paramètre tableau, 
     le nom du paramètre tableau et la collection correspondant à celui-ci.
 </summary>
 <typeparam name="T">Type des occurences du paramètre tableau</typeparam>
 <param name="_strNomParam">Nom du paramètre tableau tel qu'indiqué dans la procédure stockée</param>
 <param name="_colctParam">Collection des occurences du paramètre tableau</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamEntreTabloAjouParamSortiTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamEntreTabloAjouParamSortiTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamEntreSorti``1(System.String,``0)">
 <summary>
     Ajoute le paramètre entrant-sortant d'une procédure stockée Oracle, en spécifiant les arguments suivants : le type du paramètre entrant-sortant, son nom et sa valeur.
 </summary>
 <typeparam name="T">Type du paramètre</typeparam>
 <param name="_strNomParam">Nom du paramètre tel qu'indiqué dans la procédure stockée</param>
 <param name="_objParam">Valeur du paramètre</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamEntreSortiExecProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamEntreSortiExecProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamEntreSortiTablo``1(System.String,System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Ajoute le paramètre entrant-sortant d'une procédure stockée Oracle dont le type est un tableau Oracle <see cref="F:Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray">
     Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray</see>, en spécifiant les arguments suivants : le type des occurences du paramètre tableau, 
     le nom du paramètre tableau et la collection correspondant à celui-ci.
 </summary>
 <typeparam name="T">Type des occurences du paramètre tableau entrant</typeparam>
 <param name="_strNomParam">Nom du paramètre tableau entrant tel qu'indiqué dans la procédure stockée</param>
 <param name="_colctParam">Collection des occurences du paramètre tableau</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamEntreSortiTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamEntreSortiTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamSorti``1(System.String)">
 <summary>
      Ajoute le paramètre sortant d'une procédure stockée Oracle, en spécifiant les arguments suivants : le type du paramètre sortant et son nom.
 </summary>
 <typeparam name="T">Type du paramètre sortant</typeparam>
 <param name="_strNomParam">Nom du paramètre sortant tel qu'indiqué dans la procédure stockée</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrStrAjouParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrStrAjouParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamSortiTablo``1(System.String,System.Int32)">
 <summary>
     Ajoute le paramètre sortant d'une procédure stockée Oracle dont le type est un tableau Oracle <see cref="F:Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray">
     Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray</see>, en spécifiant les arguments suivants : le type des occurences du paramètre tableau,
     le nom du paramètre tableau et le nombre d'occurences du paramètre tableau.
 </summary>
 <typeparam name="T">Type des occurences du paramètre tableau sortant</typeparam>
 <param name="_strNomParam">Nom du paramètre tableau sortant tel qu'indiqué dans la procédure stockée</param>
 <param name="_intNbrOcc">Nombre d'occurences du paramètre tableau sortant</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamEntreTabloAjouParamSortiTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamEntreTabloAjouParamSortiTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamRefCursorSorti(System.String)">
 <summary>
     Ajoute le paramètre sortant d'une procédure stockée Oracle dont le type est un curseur Oracle <see cref="F:Oracle.DataAccess.Client.OracleDbType.RefCursor">
     Oracle.DataAccess.Client.OracleDbType.RefCursor</see>, en spécifiant comme argument le nom du paramètre curseur.
 </summary>
 <param name="_strNomParam">Nom du paramètre sortant de type curseur tel qu'indiqué dans la procédure stockée</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamTabloAjouParamRefCursorSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamTabloAjouParamRefCursorSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamCodRetou(System.String)">
 <summary>
     Ajoute le paramètre code de retour d'une procédure stockée Oracle, en spécifiant comme argument le nom du paramètre code de retour.
 </summary>
 <param name="_strNomParam">Nom du paramètre code de retour tel qu'indiqué dans la procédure stockée</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamCodRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamCodRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamCodRetouTablo(System.String)">
 <summary>
     Ajoute le paramètre code de retour d'une procédure stockée Oracle dont le type est un tableau Oracle <see cref="F:Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray">
     Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray</see>, en spécifiant comme argument le nom du paramètre tableau.
 </summary>
 <param name="_strNomParam">Nom du paramètre tableau tel qu'indiqué dans la procédure stockée</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamCodRetouTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamCodRetouTablo" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ObtenirParamSorti``1(System.String)">
 <summary>
     Obtient la valeur d'un paramètre de sortie d'une procédure stockée Oracle, en spécifiant les arguments suivants : le type du paramètre et son nom.
 </summary>
 <typeparam name="T">Type du paramètre de sortie</typeparam>
 <param name="_strNomParam">Nom du paramètre de sortie tel qu'indiqué dans la procédure stockée</param>
 <returns>Valeur du paramètre de sortie</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamObtnParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamObtnParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc">
 <summary>
     Exécute une procédure stockée Oracle. 
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
 </summary>
 <returns>Collection du ou des message(s) de traitement renvoyés(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AjouParamEntreSortiExecProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AjouParamEntreSortiExecProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant les arguments suivants :
     une classe d'entrée à implémenter 
     et une instance de la classe d'entrée à implémenter. 
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
 </summary>
 <typeparam name="TParamEntre">Classe d'entrée qui encapsule le(s) paramètres entrant de la procédure stockée</typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée <typeparamref name="TParamEntre" /> qui encapsule le(s) paramètres entrant de la procédure stockée</param>
 <returns>Collection du ou des message(s) de traitement renvoyé(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <h3>Classe d'entrée</h3><para>
      <ul>
        <li>Chaque propriété de la classe d'entrée <typeparamref name="TParamEntre" /> à implémenter doit correspondre à un paramètre entrant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li> 
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre entrant correspondant dans la procédure stockée Oracle.</li>
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est 
          <see cref="F:System.Data.ParameterDirection.Input" />.
        </li>
        <li>
          Une instance de la classe d'entrée à implémenter doit être passée à l'argument <paramref name="_objParamEntre" /> de cette 
          méthode.
        </li>        
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant comme argument le délégué d'une fonction de rappel ("callback") à implémenter. 
     Si la gestion automatique de la transaction est activée lors de l'appel du constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> (comportement par défaut), alors c'est la fonction de rappel qui gère la transaction.
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
 </summary>
 <param name="_fctExecTraitTrx">Fonction exécutée juste avant la fin de la transaction pour effectuer un traitement et déterminer si on annule ou termine la transaction</param>
 <returns>Collection du ou des message(s) de traitement renvoyé(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTrxNouvProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTrxNouvProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <h3>Argument délégué d'une fonction de rappel ("callback")</h3><para>      
      <ul>
        <li>
          Si l'argument délégué de la fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> n'est pas nul, alors cette méthode débute la transaction dès qu'elle est lancée
          en appelant <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> est lancée par cette méthode juste après l'appel de la procédure stockée Oracle et juste avant la 
          fin de la transaction. <paramref name="_fctExecTraitTrx" /> peut donc être utilisée pour effectuer un traitement après l'exécution de la procédure stockée Oracle.
          Elle peut par exemple traiter des paramètres retournés par la procédure stockée ou afficher leurs valeurs dans une interface.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> doit renvoyer un <see cref="T:System.Boolean" />, afin que cette méthode puisse déterminer
          si la transaction est terminée ou annulée. Si la valeur booléenne retournée est <c>True</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" />
          est appelée. Si la valeur booléenne retournée est <c>False</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" /> est appelée.
        </li>
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant les arguments suivants : 
     une classe d'entrée à implémenter, 
     une instance de la classe d'entrée à implémenter 
     et le délégué d'une fonction de rappel ("callback") à implémenter.
     Si la gestion automatique de la transaction est activée lors de l'appel du constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> (comportement par défaut), alors c'est la fonction de rappel qui gère la transaction.
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
 </summary>
 <typeparam name="TParamEntre">Classe d'entrée qui encapsule le(s) paramètres entrant de la procédure stockée</typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée <typeparamref name="TParamEntre" /> qui encapsule le(s) paramètres entrant de la procédure stockée</param>
 <param name="_fctExecTraitTrx">Fonction exécutée juste avant la fin de la transaction pour effectuer un traitement et déterminer si on annule ou termine la transaction</param>
 <returns>Collection du ou des message(s) de traitement renvoyé(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTrxTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTrxTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <h3>Classe d'entrée</h3><para>
      <ul>
        <li>Chaque propriété de la classe d'entrée <typeparamref name="TParamEntre" /> à implémenter doit correspondre à un paramètre entrant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li> 
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre entrant correspondant dans la procédure stockée Oracle.</li>
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est 
          <see cref="F:System.Data.ParameterDirection.Input" />.
        </li>
        <li>
          Une instance de la classe d'entrée à implémenter doit être passée à l'argument <paramref name="_objParamEntre" /> de cette 
          méthode.
        </li>        
      </ul>
    </para>
 <h3>Argument délégué d'une fonction de rappel ("callback")</h3><para>      
      <ul>
        <li>
          Si l'argument délégué de la fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> n'est pas nul, alors cette méthode débute la transaction dès qu'elle est lancée
          en appelant <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> est lancée par cette méthode juste après l'appel de la procédure stockée Oracle et juste avant la 
          fin de la transaction. <paramref name="_fctExecTraitTrx" /> peut donc être utilisée pour effectuer un traitement après l'exécution de la procédure stockée Oracle.
          Elle peut par exemple traiter des paramètres retournés par la procédure stockée ou afficher leurs valeurs dans une interface.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> doit renvoyer un <see cref="T:System.Boolean" />, afin que cette méthode puisse déterminer
          si la transaction est terminée ou annulée. Si la valeur booléenne retournée est <c>True</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" />
          est appelée. Si la valeur booléenne retournée est <c>False</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" /> est appelée.
        </li>
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant les arguments suivants : 
     un contexte, soit un type qui implémente un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>, 
     et le délégué d'une fonction de rappel ("callback") à implémenter. 
     Si la gestion automatique de la transaction est activée lors de l'appel du constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> (comportement par défaut), alors c'est la fonction de rappel à implémenter qui gère la transaction.
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
     La collection renvoyée est du même type que le contexte.
 </summary>
 <typeparam name="TListeMsgTrait">Contexte représentant le type de la collection du ou des message(s) de traitement à passer à la fonction de rappel</typeparam>
 <param name="_fctExecTraitTrx">Fonction exécutée juste avant la fin de la transaction pour effectuer un traitement et déterminer si on annule ou termine la transaction</param>
 <returns>Collection de type <typeparamref name="TListeMsgTrait" /> du ou des message(s) de traitement renvoyé(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTrxContx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FonctRaplTerminerTrxCntx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTrxContx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FonctRaplTerminerTrxCntx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <h3>Argument délégué d'une fonction de rappel ("callback")</h3><para>
      <ul>
        <li>
          Si l'argument délégué de la fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> n'est pas nul, alors cette méthode débute la transaction dès qu'elle est lancée 
          en appelant <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> est lancée par cette méthode juste après l'appel de la procédure stockée Oracle et juste avant la
          fin de la transaction. <paramref name="_fctExecTraitTrx" /> peut donc être utilisée pour effectuer un traitement après l'exécution de la procédure stockée Oracle.
          Elle peut par exemple traiter des paramètres retournés par la procédure stockée.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> doit renvoyer un <see cref="T:System.Boolean" />, afin que cette méthode puisse déterminer
          si la transaction est terminée ou annulée. Si la valeur booléenne retournée est <c>True</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" />
          est appelée. Si la valeur booléenne retournée est <c>False</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" /> est appelée.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> doit avoir un argument du même type que le contexte <typeparamref name="TListeMsgTrait" />, afin de recevoir en paramètre
          la collection de message(s) de traitement renvoyé(s) par la procédure stockée Oracle. Selon le(s) messages(s) de traitement retourné(s), on 
          peut effectuer un traitement particulier ou encore, déterminer si la transaction est terminée ou annulée.
        </li>
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant comme argument un contexte, soit un type qui implémente un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>. 
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
     La collection renvoyée est du même type que le contexte.
 </summary>
 <typeparam name="TListeMsgTrait">Contexte représentant le type de la collection du ou des message(s) de traitement à passer à la fonction de rappel</typeparam>
 <returns>Collection de type <typeparamref name="TListeMsgTrait" /> du ou des message(s) de traitement renvoyé(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcContx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcContx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant les arguments suivants : 
     une classe d'entrée à implémenter, 
     un contexte, soit un type qui implémente un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>, 
     une instance de la classe d'entrée à implémenter 
     et le délégué d'une fonction de rappel ("callback") à implémenter.
     Si la gestion automatique de la transaction est activée lors de l'appel du constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> (comportement par défaut), alors c'est la fonction de rappel à implémenter qui gère la transaction.
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
     La collection renvoyée est du même type que le contexte.
 </summary>
 <typeparam name="TParamEntre">Classe d'entrée qui encapsule le(s) paramètres entrant de la procédure stockée</typeparam>
 <typeparam name="TListeMsgTrait">Contexte représentant le type de la collection du ou des message(s) de traitement à passer à la fonction de rappel</typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée <typeparamref name="TParamEntre" /> qui encapsule le(s) paramètres entrant de la procédure stockée</param>
 <param name="_fctExecTraitTrx">Fonction exécutée juste avant la fin la transaction pour effectuer un traitement et déterminer si on annule ou termine la transaction</param>
 <returns>Collection de type <typeparamref name="TListeMsgTrait" /> du ou des message(s) de traitement retourné(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />        
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTrxContxTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamEntreDoss" />        
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FonctRaplTerminerTrxCntx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTrxContxTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FonctRaplTerminerTrxCntx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <h3>Classe d'entrée</h3><para>
      <ul>
        <li>Chaque propriété de la classe d'entrée <typeparamref name="TParamEntre" /> à implémenter doit correspondre à un paramètre entrant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li> 
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre entrant correspondant dans la procédure stockée Oracle.</li>
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est 
          <see cref="F:System.Data.ParameterDirection.Input" />.
        </li>
        <li>
          Une instance de la classe d'entrée à implémenter doit être passée à l'argument <paramref name="_objParamEntre" /> de cette 
          méthode.
        </li>        
      </ul>
    </para>
 <h3>Argument délégué d'une fonction de rappel ("callback")</h3><para>
      <ul>
        <li>
          Si l'argument délégué de la fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> n'est pas nul, alors cette méthode débute la transaction dès qu'elle est lancée 
          en appelant <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction" />.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> est lancée par cette méthode juste après l'appel de la procédure stockée Oracle et juste avant la
          fin de la transaction. <paramref name="_fctExecTraitTrx" /> peut donc être utilisée pour effectuer un traitement après l'exécution de la procédure stockée Oracle.
          Elle peut par exemple traiter des paramètres retournés par la procédure stockée.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> doit renvoyer un <see cref="T:System.Boolean" />, afin que cette méthode puisse déterminer
          si la transaction est terminée ou annulée. Si la valeur booléenne retournée est <c>True</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction" />
          est appelée. Si la valeur booléenne retournée est <c>False</c>, alors <see cref="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction" /> est appelée.
        </li>
        <li>
          La fonction de rappel .NET <paramref name="_fctExecTraitTrx" /> doit avoir un argument du même type que le contexte <typeparamref name="TListeMsgTrait" />, afin de recevoir en paramètre
          la collection de message(s) de traitement renvoyé(s) par la procédure stockée Oracle. Selon le(s) messages(s) de traitement retourné(s), on 
          peut effectuer un traitement particulier ou encore, déterminer si la transaction est terminée ou annulée.
        </li>
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant les arguments suivants : 
     un contexte, soit un type qui implémente un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>, 
     et une instance de la classe d'entrée à implémenter. 
     Cette méthode renvoie le(s) message(s) de traitement de la procédure stockée dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>. 
     La collection renvoyée est du même type que le contexte.
 </summary>
 <typeparam name="TParamEntre">Classe d'entrée qui encapsule le(s) paramètres entrant de la procédure stockée</typeparam>
 <typeparam name="TListeMsgTrait">Contexte représentant le type de la collection du ou des message(s) de traitement</typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée <typeparamref name="TParamEntre" /> qui encapsule le(s) paramètres entrant de la procédure stockée</param>
 <returns>Collection de type <typeparamref name="TListeMsgTrait" /> du ou des message(s) de traitement retourné(s) par la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcContxTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamEntreDoss" />        
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcContxTParamEntre" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <h3>Classe d'entrée</h3><para>
      <ul>
        <li>Chaque propriété de la classe d'entrée <typeparamref name="TParamEntre" /> à implémenter doit correspondre à un paramètre entrant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li> 
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre entrant correspondant dans la procédure stockée Oracle.</li>
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est 
          <see cref="F:System.Data.ParameterDirection.Input" />.
        </li>
        <li>
          Une instance de la classe d'entrée à implémenter doit être passée à l'argument <paramref name="_objParamEntre" /> de cette 
          méthode.
        </li>        
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant comme argument 
     une classe de sortie à implémenter.
     La classe de sortie doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.
     Cette méthode renvoie une instance de la classe de sortie.
 </summary>
 <typeparam name="TParamSorti">Classe de sortie qui hérite de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see></typeparam>
 <returns>Instance de la classe de sortie <typeparamref name="TParamSorti" /> qui encapsule le(s) paramètres sortant de la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="Dossier" />        
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para> 
 <h3>Classe de sortie</h3><para>
      <ul>
        <li>La classe de sortie à implémenter <typeparamref name="TParamSorti" /> doit doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.</li>
        <li>Une instance de la classe de sortie à implémenter sera retournée par cette méthode.</li>
        <li>Chaque propriété de la classe de sortie à implémenter doit correspondre à un paramètre sortant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre sortant correspondant dans la procédure stockée Oracle.
        </li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est
          <see cref="F:System.Data.ParameterDirection.Output" />.
        </li>        
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(System.Boolean)">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant comme argument 
     une classe de sortie à implémenter
     et une valeur de type <see cref="T:System.Boolean" /> qui force le retour de l'instance de sortie en cas de message de traitement avec code erreur ou sévère.
     La classe de sortie doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.
     Cette méthode renvoie une instance de la classe de sortie.
 </summary>
 <typeparam name="TParamSorti">Classe de sortie qui hérite de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see></typeparam>
 <param name="_blnForceRetouParamSorti">Force le retour de l'instance de sortie en cas de message de traitement avec code erreur ou sévère</param>
 <returns>Instance de la classe de sortie <typeparamref name="TParamSorti" /> qui encapsule le(s) paramètres sortant de la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="Dossier" />        
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para> 
 <h3>Classe de sortie</h3><para>
      <ul>
        <li>La classe de sortie à implémenter <typeparamref name="TParamSorti" /> doit doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.</li>
        <li>Une instance de la classe de sortie à implémenter sera retournée par cette méthode.</li>
        <li>Chaque propriété de la classe de sortie à implémenter doit correspondre à un paramètre sortant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre sortant correspondant dans la procédure stockée Oracle.
        </li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est
          <see cref="F:System.Data.ParameterDirection.Output" />.
        </li>        
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant les arguments suivants :
     une classe de sortie à implémenter,
     une classe d'entrée à implémenter
     et une instance de la classe d'entrée à implémenter. 
     La classe de sortie doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.
     Cette méthode renvoie une instance de la classe de sortie.
 </summary>
 <typeparam name="TParamEntre">Classe d'entrée qui encapsule le(s) paramètres entrant de la procédure stockée</typeparam>
 <typeparam name="TParamSorti">Classe de sortie qui hérite de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see></typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée <typeparamref name="TParamEntre" /> qui encapsule le(s) paramètres entrant de la procédure stockée</param>
 <returns>Instance de la classe de sortie <typeparamref name="TParamSorti" /> qui encapsule le(s) paramètres sortant de la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTParamEntreTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="Dossier" />        
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTParamEntreTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para> 
 <h3>Classe de sortie</h3><para>
      <ul>
        <li>La classe de sortie à implémenter <typeparamref name="TParamSorti" /> doit doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.</li>
        <li>Une instance de la classe de sortie à implémenter sera retournée par cette méthode.</li>
        <li>Chaque propriété de la classe de sortie à implémenter doit correspondre à un paramètre sortant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre sortant correspondant dans la procédure stockée Oracle.
        </li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est
          <see cref="F:System.Data.ParameterDirection.Output" />.
        </li>        
      </ul>
    </para>
 <h3>Classe d'entrée</h3><para>
      <ul>
        <li>Chaque propriété de la classe d'entrée <typeparamref name="TParamEntre" /> à implémenter doit correspondre à un paramètre entrant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li> 
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre entrant correspondant dans la procédure stockée Oracle.</li>
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est 
          <see cref="F:System.Data.ParameterDirection.Input" />.
        </li>
        <li>
          Une instance de la classe d'entrée à implémenter doit être passée à l'argument <paramref name="_objParamEntre" /> de cette 
          méthode.
        </li>        
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0,System.Boolean)">
 <summary>
     Exécute une procédure stockée Oracle en spécifiant les arguments suivants :
     une classe de sortie à implémenter,
     une classe d'entrée à implémenter
     et une instance de la classe d'entrée à implémenter. 
     La classe de sortie doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.
     Cette méthode renvoie une instance de la classe de sortie.
 </summary>
 <typeparam name="TParamEntre">Classe d'entrée qui encapsule le(s) paramètres entrant de la procédure stockée</typeparam>
 <typeparam name="TParamSorti">Classe de sortie qui hérite de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see></typeparam>
 <param name="_objParamEntre">Instance de la classe d'entrée <typeparamref name="TParamEntre" /> qui encapsule le(s) paramètres entrant de la procédure stockée</param>
 <param name="_blnForceRetouParamSorti">Force le retour de l'instance de sortie en cas de message de traitement avec code erreur ou sévère</param>
 <returns>Instance de la classe de sortie <typeparamref name="TParamSorti" /> qui encapsule le(s) paramètres sortant de la procédure stockée</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTParamEntreTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="Dossier" />        
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptRAMQParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTParamEntreTParamSorti" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamEntreDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ParamSortiDoss" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>      
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la méthode
      <see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)" />, on affecte un numéro d'erreur imprévue.
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. Si le code de
      retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      La présente méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code
      de retour de la procédure stockée Oracle.
    </para><para>
      Par contre, cette méthode ne lèvera pas d’exception si le numéro d'erreur imprévue ne correspond à aucun code de retour de la procédure 
      stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou des erreur(s) fonctionnelle(s). Cette méthode 
      retournera le(s) message(s) de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> pour chaque erreur(s) 
      fonctionnelle(s) dans une collection implémentant un <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para> 
 <h3>Classe de sortie</h3><para>
      <ul>
        <li>La classe de sortie à implémenter <typeparamref name="TParamSorti" /> doit doit hériter de <see cref="T:RAMQ.ClasseBase.ParamSorti">RAMQ.ClasseBase.ParamSorti</see>.</li>
        <li>Une instance de la classe de sortie à implémenter sera retournée par cette méthode.</li>
        <li>Chaque propriété de la classe de sortie à implémenter doit correspondre à un paramètre sortant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre sortant correspondant dans la procédure stockée Oracle.
        </li>
        <li>
          Chaque attribut de propriété doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est
          <see cref="F:System.Data.ParameterDirection.Output" />.
        </li>        
      </ul>
    </para>
 <h3>Classe d'entrée</h3><para>
      <ul>
        <li>Chaque propriété de la classe d'entrée <typeparamref name="TParamEntre" /> à implémenter doit correspondre à un paramètre entrant de la procédure stockée Oracle.</li>
        <li>Chaque propriété doit avoir un attribut de la classe <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li> 
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" /> dont la valeur est le nom
          exact du paramètre entrant correspondant dans la procédure stockée Oracle.</li>
        <li>
          Chaque attribut doit avoir une propriété <see cref="P:RAMQ.Attribut.ValeurEntite.Direction" /> dont la valeur est 
          <see cref="F:System.Data.ParameterDirection.Input" />.
        </li>
        <li>
          Une instance de la classe d'entrée à implémenter doit être passée à l'argument <paramref name="_objParamEntre" /> de cette 
          méthode.
        </li>        
      </ul>
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.NouvProc(System.String,System.String,System.String)">
 <summary>
     Déclenche une nouvelle procédure stockée en spécifiant les arguments suivants :
     le nom de la procédure stockée, 
     le code d'application (PPP) et
     le numéro de l'erreur imprévue.
 </summary>
 <param name="_strNomProc">Nom de la procédure stockée</param>
 <param name="_strCodAppli">Code d'application</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="ExecProcTrxNouvProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="ExecProcTrxNouvProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FonctRaplTerminerTrx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="AfficherEnrgsCurOra" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <para>
      <table border="2">
        <tr>
          <th colspan="4">Méthodes d'exécution d'une procédure stockée Oracle</th>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc</th>
        </tr>
        <tr>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``1(``0)" /></td>
          <td><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProc``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``1" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcContx``2(``0)" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx(System.Func{System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrx``1(``0,System.Func{System.Boolean})" /></td>
        </tr>
        <tr>
          <th colspan="4">RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx</th>
        </tr>
        <tr>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``1(System.Func{``0,System.Boolean})" /></td>
          <td colspan="2"><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.ExecuterProcTrxContx``2(``0,System.Func{``1,System.Boolean})" /></td>
        </tr>
      </table>
    </para><para>
      Par contre, les méthodes d'exécution ci-dessus ne lèveront pas d’exception si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> 
      ne correspond à aucun code de retour de la procédure stockée Oracle. Le(s) code(s) de retour de la procédure stockée Oracle sont alors une ou 
      des erreur(s) fonctionnelle(s). Ces méthodes d'exécution de procédure stockée Oracle retourneront le(s) message(s) de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> de chaque erreur(s) fonctionnelle(s) dans une collection implémentant un 
      <see cref="T:System.Collections.Generic.IEnumerable`1" />. Ce(s) message(s) de traitement(s) de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> sont obtenus à l'aide d'un service de résolution des messages.
    </para>
 <para>
      En créant une instance à l'aide d'un constructeur de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou en appelant la présente méthode, 
      on affecte un numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />. Les méthodes d'exécution de 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, qui appellent une procédure stockée Oracle, lèveront une exception
      de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />
      correspond à un code de retour de la procédure stockée Oracle. Les méthodes qui exécutent une procédure stockée Oracle sont :
    </para> 
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée 
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" />, 
      c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para>
 <para>
     Cette méthode est particulièrement utile lorsqu'après la création de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> plusieurs procédures stockées doivent être appelées consécutivement.
 </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.FinAppelProc">
 <summary>
 Finalise l'appel d'une procédure stockée en cours. Il n'est pas obligatoire d'appeler cette méthode après avoir exécuté une procédure stockée (voir la remarque).
 </summary>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="CnstrAccesOraStrStrStrStrBlnFinAppelProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="FinAccesDonnesOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="DebAccesDonnesOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="CnstrAccesOraStrStrStrStrBlnFinAppelProc" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="FinAccesDonnesOraEx" />
 </code>
 </example>
 <remarks>
 Cette méthode permet entre autre de libérer un attribut privé de type <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" /> qui est instancié lors de l'appel 
 de l'un des constructeurs de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> ou de la méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.NouvProc(System.String,System.String,System.String)" />. 
 Par contre, cet attribut privé est aussi libéré si on appelle une seconde fois <see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.NouvProc(System.String,System.String,System.String)" /> ou
 lors de la disposition de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> avec <see cref="M:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra.Dispose(System.Boolean)" />.
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.NamespaceDoc">
 <summary>
 Cet espace de nom contient les classes et interfaces qui permettent entre autre 
 d'accéder à la base de données Oracle (<see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> et <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" />), 
 d'effectuer des opérations sur ses objets (<see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> et <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" />), 
 de faciliter l'appel aux procédures stockées Oracle (<see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> et <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />) et 
 de gérer le traitement des erreurs (<see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" />).
 </summary>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.IProcOra">
 <summary>
 Cette interface définit différentes méthodes pour faciliter l'exécution des procédures stockées Oracle.
 Cette interface doit être utilisée conjointement avec <see cref="T:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra" />
 ou <see cref="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp" /> qui permettent de se connecter à la
 base de données Oracle.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IProcOra.AjouterTablo(System.String,System.Int32,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Data.ParameterDirection)">
 <summary>
 Ajoute un paramètre Oracle de type tableau <see cref="F:Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray">
 Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray</see> en spécifiant le nom du paramètre tableau, le nombre 
 d'occurences dans le tableau, le type Oracle des occurences, leur longueur maximale et la direction paramètre tableau.
 </summary>
 <param name="_strNomParam">Nom du paramètre tableau</param>
 <param name="_intNbrOccParam">Nombre d'occurences dans le tableau</param>
 <param name="_objOracleType">Type Oracle des occurences du tableau</param>
 <param name="_intLngChamp">Longueur maximale des valeurs d'occurences du paramètre tableau</param>
 <param name="_prmDirect">Direction du paramètre tableau</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="DebProcOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="AjouTabloStrIntEnuIntEnu" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="FinProcOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="DebProcOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="AjouTabloStrIntEnuIntEnu" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="FinProcOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IProcOra.AjouterTablo``1(System.String,System.Int32,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Data.ParameterDirection,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Ajoute un paramètre Oracle de type tableau <see cref="F:Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray">
 Oracle.DataAccess.Client.OracleCollectionType.PLSQLAssociativeArray</see> en spécifiant le type des occurences du 
 tableau, le nom du paramètre tableau, le nombre d'occurences dans le tableau, le type Oracle des occurences, leur 
 longueur maximale, la direction du paramètre tableau et la collection des valeurs de chaque occurence du tableau.
 </summary>
 <typeparam name="T">Type des occurences du tableau</typeparam>
 <param name="_strNomParam">Nom du paramètre tableau</param>
 <param name="_intNbrOccParam">Nombre d'occurences dans le tableau</param>
 <param name="_objOracleType">Type Oracle des occurences du tableau</param>
 <param name="_intLngChamp">Longueur maximale des valeurs d'occurences du paramètre tableau</param>
 <param name="_prmDirect">Direction du paramètre tableau</param>
 <param name="_colctTblVal">Collection des valeurs de chaque occurence du tableau</param>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="DebProcOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="AjouTabloStrIntEnuIntEnuColct" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="FinProcOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="DebProcOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="AjouTabloStrIntEnuIntEnuColct" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="FinProcOraEx" />
 </code>
 </example>
 <remarks>
 <h3>Direction du paramètre</h3><para>
      La direction du paramètre de la procédure stockée permet, par exemple, de définir s'il s'agit d'un paramètre entrant ou sortant. Voyez
      <see cref="T:System.Data.ParameterDirection" /> pour connaître les directions possibles. Lorsqu'une méthode d'ajout n'a pas d'argument
      pour spécifier la direction d'un paramètre, par défaut il s'agit d'un paramètre d'entrée <see cref="F:System.Data.ParameterDirection.Input" />.
    </para><para>        
      Prendre note qu'avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />, la direction de paramètre 
      <see cref="F:System.Data.ParameterDirection.ReturnValue" /> n'est pas supportée par les méthodes d'ajout de paramètre suivantes :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParam``1(System.String,``0,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Int32,System.Data.ParameterDirection)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra.AjoutParamTablo``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Data.ParameterDirection)" />;</li>        
      </ul>
    </para><para>
      Par contre, avec la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.ProcOra" />, la direction de paramètre <see cref="F:System.Data.ParameterDirection.ReturnValue" /> est supportée 
      avec toutes les méthodes d'ajout de paramètre.
    </para>
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.ProcOra">
 <summary>
 Classe qui expose différentes méthodes pour faciliter l'exécution des procédures stockées Oracle.
 Cette classe doit être utilisée conjointement avec <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" />
 ou <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> qui permettent de se connecter à la
 base de données Oracle.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-02-25<br/>
 Description: Version originale sous le framework .NET 2.0<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-07-20<br/>
 Description:  Ajout de fonctionnalités<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Alexandre Chaussé-Paradis<br/>
 Date   : 2011-03-01<br/>
 Description:  Création de la version V4 de ce module (basé sur V2)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>    
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.ProcOra.AjouterTablo(System.String,System.Int32,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Data.ParameterDirection)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.ProcOra.AjouterTablo``1(System.String,System.Int32,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Data.ParameterDirection,System.Collections.Generic.IEnumerable{``0})">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.ProcOra.CreerParam(System.String,System.Object)">
 <summary>
 Crée un paramètre Oracle en spécifiant son nom et son type Oracle <see cref="T:Oracle.DataAccess.Client.OracleDbType">Oracle.DataAccess.Client.OracleDbType</see>.
 Retourne ensuite le paramètre Oracle de type <see cref="T:Oracle.DataAccess.Client.OracleParameter">Oracle.DataAccess.Client.OracleParameter</see> 
 qui implémente l'interface <see cref="T:System.Data.IDbDataParameter" />. Cette méthode permet d'appeler le constructeur de la classe 
 <see cref="T:Oracle.DataAccess.Client.OracleParameter">Oracle.DataAccess.Client.OracleParameter</see> correspondant au fournisseur ADO.NET Oracle.
 Elle est une implémentation de la méthode protégée <see cref="M:RAMQ.AccesDonnees.Procedure.CreerParam(System.String,System.Object)" /> 
 de la classe <see cref="T:RAMQ.AccesDonnees.Procedure" />. Elle ne peut être appelée que par cette classe.
 </summary>
 <param name="_strNom">Nom du paramètre</param>
 <param name="_objTyp">type Oracle <see cref="T:Oracle.DataAccess.Client.OracleDbType">Oracle.DataAccess.Client.OracleDbType</see></param>
 <returns>Le paramètre Oracle de type <see cref="T:Oracle.DataAccess.Client.OracleParameter">Oracle.DataAccess.Client.OracleParameter</see></returns>
 <remarks>
 Cette méthode est entre autre appelée par la méthodes <see cref="M:RAMQ.AccesDonnees.Procedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection,System.Object)" /> 
 de la classe <see cref="T:RAMQ.AccesDonnees.Procedure" />, afin d'ajouter un paramètre. Voir l'exemple ci-dessous qui appelle 
 <see cref="M:RAMQ.AccesDonnees.Procedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection,System.Object)" />.
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="DebProcOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="AjouTabloStrIntEnuIntEnu" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\ProcOraEx.vb" region="FinProcOraEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="DebProcOraEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="AjouTabloStrIntEnuIntEnu" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\ProcOraEx.cs" region="FinProcOraEx" />
 </code>
 </example>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur">
 <summary> 
 Classe qui permet de gérer le traitement des erreurs avec une base de données Oracle.
 Elle implémente l'interface <see cref="T:RAMQ.AccesDonnees.ITraitementErreur" />.
 </summary>
 <remarks>
 Auteur : Pierre Deblois <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.#ctor(System.String,System.String)">
 <summary>
 Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> en spécifiant le code d'application (PPP) et le numéro de l'erreur imprévue.
 </summary>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception
      Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      On appelle la méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" /> de la classe
      <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> afin d'effectuer le traitement d'un code de retour de la procédure stockée Oracle. 
      Cette méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue 
      <paramref name="_strNoMsgErrImprv" /> correspond au code de retour de la procédure stockée Oracle qu'elle reçoit en paramètre.
    </para><para>
      Par contre, si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> ne correspond pas au code de retour de la procédure stockée Oracle,
      alors ce code de retour est une erreur fonctionnelle. La méthode 
      <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" /> retournera le message de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> associé au code de retour. Ce message de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> est obtenu à l'aide d'un service de résolution des messages.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.#ctor(RAMQ.Message.IResolutionMessage,System.String,System.String)">
 <summary>
 Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> en spécifiant l'objet de résolution de message, le code d'application (PPP) et 
 le numéro de l'erreur imprévue.
 </summary>
 <param name="_objIResolMsg">Objet de résolution de message</param>
 <param name="_strCodAppli">Code d'application (PPP)</param>
 <param name="_strNoMsgErrImprv">Numéro d'erreur imprévue associée à une procédure stockée de l'application <paramref name="_strCodAppli" /></param>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Le paramètre <paramref name="_strNoMsgErrImprv" /> représente le numéro d'erreur imprévue. Normalement, chaque procédure stockée
      Oracle d'une application (PPP), dont la valeur correspond au paramètre <paramref name="_strCodAppli" />, renvoie un code de retour
      lorsqu'une exception Oracle survient. Si le code de retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception
      Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      On appelle la méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" /> de la classe
      <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> afin d'effectuer le traitement d'un code de retour de la procédure stockée Oracle. 
      Cette méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue 
      <paramref name="_strNoMsgErrImprv" /> correspond au code de retour de la procédure stockée Oracle qu'elle reçoit en paramètre.
    </para><para>
      Par contre, si le numéro d'erreur imprévue <paramref name="_strNoMsgErrImprv" /> ne correspond pas au code de retour de la procédure stockée Oracle,
      alors ce code de retour est une erreur fonctionnelle. La méthode 
      <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" /> retournera le message de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> associé au code de retour. Ce message de traitement de type 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> est obtenu à l'aide d'un service de résolution des messages.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrObjStrStrCodAppliErrImprv" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrObjStrStrCodAppliErrImprv" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.TraitementErreur.CodAppli">
 <summary>
 Permet l'accès au code d'application (PPP).
 </summary>
 <returns>Code d'application (PPP)</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrObjStrStrCodAppliErrImprv" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrObjStrStrCodAppliErrImprv" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.TraitementErreur.NoMsgErrImprv">
 <summary>
 Permet l'accès au numéro de message d'erreur imprévue.
 </summary>
 <returns>Numéro de message d'erreur imprévue</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrObjStrStrCodAppliErrImprv" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrObjStrStrCodAppliErrImprv" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.EstErrFonct(System.String)">
 <summary>
 Détermine si le code d'erreur passé en paramètre correspond à une erreur fonctionnelle.
 Le code d'erreur passé en paramètre est en fait un code de retour d'une procédure stockée Oracle.
 </summary>
 <param name="_strCodErr">Message d'erreur représentant un code de retour d'une procédure stockée</param>
 <returns><c>True</c> s'il s'agit d'une erreur fonctionnelle et <c>False</c> s'il s'agit d'une erreur imprévue</returns>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient.
      Si le code de retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
    </para><para>
      On appelle la méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" /> de la classe
      <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" />, afin d'effectuer le traitement d'un code de retour de la procédure stockée Oracle.
      Cette méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, dès que le numéro d'erreur imprévue correspond à un code de
      retour de la procédure stockée Oracle qu'elle reçoit en paramètre.
    </para><para>
      Par contre si le numéro d'erreur imprévue ne correspond pas au code de retour de la procédure stockée Oracle, alors ce code de retour est  
      une erreur fonctionnelle. La méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" /> 
      retournera le message de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> qui lui est associé. 
      Ce message de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> est obtenu à l'aide d'un service de 
      résolution des messages.
    </para><para>
      La présente méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> retourne <c>True</c> lorsque le code de retour 
      <!--warning BC42307: XML comment parameter '_strMsgErr' does not match a parameter on the corresponding 'function' statement.--><paramref name="_strMsgErr" /> qui lui est passé en paramètre est une erreur fonctionnelle et <c>False</c> lorsque le code de retour est une erreur 
      imprévue. La présente méthode est appelée par la méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" />, 
      afin de déterminer s'il faut lever l'exception de type <see cref="T:System.ApplicationException" />.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)">
 <summary>
 Traite le message d'erreur passé en paramètre. Si le message est une erreur fonctionnelle, alors le message de traitement
 <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> correspondant est retourné. Si le message est une erreur imprévue, 
 alors une exception de type <see cref="T:System.ApplicationException" /> est levée. Le message d'erreur passé en paramètre est en 
 fait un code de retour d'une procédure stockée Oracle.
 </summary>
 <param name="_strMsgErr">Message d'erreur représentant un code de retour d'une procédure stockée</param>
 <param name="strSepar">Séparateur de messages</param>
 <returns>Instance d'un message de traitement</returns>
 <remarks>
 <h3>Message de traitement</h3><para>
      Les messages de traitement sont définis dans la table <b><i>com.com_msg_trait</i></b> (bases de données <b><i>&lt;envir&gt;outil</i></b> 
      ou <b><i>&lt;envir&gt;missn</i></b>). Les messages de traitement doivent être exportés sur le poste de travail dans <b><i>D:\Appli\&lt;PPP&gt;\
      &lt;PPP&gt;\&lt;PPP&gt;_MsgTrait.xml</i></b> pour être récupérés par le service de résolution de messages appelé par la classe 
      <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see>.
    </para>
 <h3>Erreur imprévue et erreur fonctionnelle</h3><para>
      Normalement, chaque procédure stockée Oracle d'une application (PPP) renvoie un code de retour lorsqu'une exception Oracle survient. 
      Si le code de retour correspond au numéro d'erreur imprévue, c'est qu'il y a eu une exception Oracle imprévue au niveau de la procédure stockée.
      Le paramètre <paramref name="_strMsgErr" /> de cette méthode correspond à un code de retour d'une procédure stockée Oracle. 
    </para><para>
      On appelle cette méthode de la classe <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> afin d'effectuer le traitement d'un code de retour
      de la procédure stockée Oracle <paramref name="_strMsgErr" />. Cette méthode lèvera une exception de type <see cref="T:System.ApplicationException" />, 
      dès que le numéro d'erreur imprévue correspond au code de retour de la procédure stockée Oracle qu'elle reçoit en paramètre <paramref name="_strMsgErr" />.
    </para><para>
      Par contre si le numéro d'erreur imprévue ne correspond pas au code de retour de la procédure stockée Oracle <paramref name="_strMsgErr" />, alors ce code
      de retour est une ou des erreur fonctionnelle. Cette méthode retournera le message de traitement de type <see cref="T:RAMQ.Message.MsgTrait">
      RAMQ.Message.MsgTrait</see> associé au code de retour. Ce message de traitement de type <see cref="T:RAMQ.Message.MsgTrait">RAMQ.Message.MsgTrait</see> 
      est obtenu à l'aide d'un service de résolution des messages. 
    </para><para>
      La méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.EstErrFonct(System.String)" /> de la classe 
      <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> retourne <c>True</c>, lorsque le code de retour qui lui est passé en paramètre est une erreur 
      fonctionnelle, et <c>False</c>, lorsque le code de retour est une erreur imprévue. La méthode 
      <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.EstErrFonct(System.String)" /> est appelée par la présente méthode, 
      <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.TraiterErr(System.String,System.Char)" />, afin de déterminer s'il faut lever l'exception de type 
      <see cref="T:System.ApplicationException" />.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="DebTraitementErreurEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="ObtnListeMsgTrait" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\TraitementErreurEx.cs" region="CnstrTraitErrStrStrEstErrFonctTraitErr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\TraitementErreurEx.vb" region="FinTraitementErreurEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.Dispose(System.Boolean)">
 <summary>                                                
 Libère toutes les ressources de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" />. Cette méthode protégée ne peut être 
 appelée que par la méthode <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.Dispose" /> de la classe 
 <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> qui implémente <see cref="M:System.IDisposable.Dispose" /> de l'interface 
 <see cref="T:System.IDisposable" />. Cette méthode protégée permet d'éviter les appels redondants lors de la libération des ressources.
 </summary>
 <param name="disposing"><c>True</c> pour pouvoir libérer les ressources</param>
 <remarks>
 <para>
      Dès qu'une classe telle <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> implémente l'interface <see cref="T:System.IDisposable" />, l'utilisation
      d'un bloc <c>Using ... End Using</c> est fortement recommandée lors de l'instanciation. Ceci permet de s'assurer que l'instance de son attribut privé de type 
      <see cref="T:RAMQ.Message.IResolutionMessage">RAMQ.Message.IResolutionMessage</see> est libérée proprement.
    </para>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.Dispose">
 <summary>
 Libère toutes les ressources de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" />. Cette méthode implémente
 la méthode <see cref="M:System.IDisposable.Dispose" /> de l'interface <see cref="T:System.IDisposable" />. Elle appelle 
 <see cref="M:RAMQ.AccesDonnees.BDOracle.TraitementErreur.Dispose(System.Boolean)" />.
 </summary>
 <remarks>
 <para>
 Le code source de cette méthode a été ajouté par Visual Basic pour permettre l'implémentation correcte du modèle pouvant être supprimé.
 </para>
 <para>
      Dès qu'une classe telle <see cref="T:RAMQ.AccesDonnees.BDOracle.TraitementErreur" /> implémente l'interface <see cref="T:System.IDisposable" />, l'utilisation
      d'un bloc <c>Using ... End Using</c> est fortement recommandée lors de l'instanciation. Ceci permet de s'assurer que l'instance de son attribut privé de type 
      <see cref="T:RAMQ.Message.IResolutionMessage">RAMQ.Message.IResolutionMessage</see> est libérée proprement.
    </para>
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.IOracleOdp">
 <summary> 
     Cette interface définit comment accéder à une base de données Oracle et effectuer des opérations sur ses objets. L'interface se veut une version 
     plus élémentaire de <see cref="T:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra" /> qui expose davantage de fonctionnalités. 
     <see cref="T:RAMQ.AccesDonnees.BDOracle.IAccesDonnesOra" /> facilite notamment l'appel de procédures stockées Oracle et la gestion automatique 
     des transactions.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ParamConnexion">
 <summary>
 <b>Normalement éviter cette propriété, car elle exige de spécifier les paramètres de connexion (voir remarque).</b><br />
 Permet l'accès aux paramètres de connexion à la base de données Oracle dont le type est <see cref="T:Oracle.DataAccess.Client.OracleConnectionStringBuilder">
 Oracle.DataAccess.Client.OracleConnectionStringBuilder</see>. Les paramètres de connexion permettent notamment de définir l'identifiant de l'usager qui se 
 connecte, son mot de passe et la source de données (généralement l'alias du fichier <b><i>tnsnames.ora</i></b>).
 </summary>
 <value>Paramètres de connexion à la base de données Oracle</value>
 <returns>Paramètres de connexion à la base de données Oracle</returns>
 <remarks>
 <h3>Constructeur et propriété avec paramètres de connexion</h3><para>
      Normalement <b>éviter le constructeur suivant</b>, dont l'argument est une instance implémentant l'interface <see cref="T:System.Data.IDbConnection" />, 
      et la propriété suivante, car ils spécifient les <b>paramètres de connexion</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.Data.IDbConnection)" />;</li>
        <li><see cref="P:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ParamConnexion" />;</li>
      </ul>
    </para><para>
      La <b>pratique recommandée à la RAMQ</b> est plutôt d'utiliser l'un des constructeurs qui spécifient le nom d'un <b>fichier UDL</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String,System.String)" />;</li>
      </ul>      
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="CnstrOraOdpCnnParamConxn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="CnstrOraOdpCnnParamConxn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IOracleOdp.EstNull(System.String)">
 <summary>
 Verifie si un paramètre est nul.
 </summary>
 <param name="_strNomParam">Nom du parametre</param>
 <returns>
 Retourne <c>True</c> si le paramètre <paramref name="_strNomParam" /> est nul.
 </returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="EstNulObtnValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="EstNulObtnValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ObtenirValParamRetou``1(System.String)">
 <summary>
 Obtient la valeur d'un paramètre de retour en spécifiant comme argument son type et son nom.
 </summary>
 <typeparam name="T">Type du paramètre</typeparam>
 <param name="_strNomParam">Nom du paramètre</param>
 <returns>Valeur du paramètre</returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="EstNulObtnValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="EstNulObtnValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ObtenirValParamRetou``1">
 <summary>
 Obtient une collection d'objets en spécifiant comme argument leur type. Chaque élément de la collection correspond à un enregistrement 
 d'un curseur Oracle. Le type des objets de la collection est une classe à définir.
 </summary>
 <typeparam name="T">Le type des objets qui sont les éléments de la collection</typeparam>
 <returns>Collection d'objets dont chaque élément correspond à un enregistrement d'un curseur Oracle</returns>
 <remarks>
 <ul>
   <li>Le type <typeparamref name="T" /> des objets de la collection doit être une classe qui a un attribut <see cref="T:RAMQ.Attribut.Entite" />.</li>
   <li>
       Contrairement à <see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirColctValParamRetou``1(System.String)" />, la présente méthode oblige à ce que la classe 
       <typeparamref name="T" /> ait un attribut <see cref="T:RAMQ.Attribut.Entite" /> avec une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />, 
       dont la valeur correspond au nom exact du paramètre curseur Oracle.
   </li> 
   <li>Les propriétés de la classe <typeparamref name="T" /> correspondent aux champs du curseur Oracle.</li><li>Ces propriétés doivent avoir un attribut <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li><li>
      Cet attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />, dont la valeur correspond 
      au nom exact du champ du curseur Oracle qui lui est associé.
    </li>
 </ul>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ObtnValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DossAttriParamCur" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ObtnValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DossAttriParamCur" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ObtenirColctValParamRetou``1(System.String)">
 <summary>
 Obtient une collection d'objets en spécifiant comme argument leur type et le nom d'un paramètre curseur Oracle. Chaque élément de la collection 
 correspond à un enregistrement du curseur Oracle spécifié en paramètre. Le type des objets de la collection est une classe à définir.
 </summary>
 <typeparam name="T">Le type des objets qui sont des éléments de la collection</typeparam>
 <param name="_strNomParam">Nom du paramètre curseur Oracle</param>
 <returns>Collection d'objets dont chaque élément correspond à un enregistrement du curseur Oracle spécifié en paramètre</returns>
 <remarks>
 <ul>
   <li>Le type <typeparamref name="T" /> des objets de la collection doit être une classe.</li>
   <li>
     Contrairement à <see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirValParamRetou``1" />, la présente méthode n'oblige pas à ce que la classe <typeparamref name="T" /> 
     ait un attribut <see cref="T:RAMQ.Attribut.Entite" /> avec une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />, dont la valeur correspond au 
     nom exact du paramètre curseur Oracle. En effet, le nom du paramètre curseur Oracle est spécifié à l'aide de l'argument <paramref name="_strNomParam" />.
   </li> 
   <li>Les propriétés de la classe <typeparamref name="T" /> correspondent aux champs du curseur Oracle.</li><li>Ces propriétés doivent avoir un attribut <see cref="T:RAMQ.Attribut.ValeurEntite" />.</li><li>
      Cet attribut doit avoir une propriété <see cref="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />, dont la valeur correspond 
      au nom exact du champ du curseur Oracle qui lui est associé.
    </li>
 </ul>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ObtnColctValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\AccesDonnesOraEx.vb" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptRAMQAttribut" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ObtnColctValParamRetou" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\AccesDonnesOraEx.cs" region="Dossier" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IOracleOdp.RemplirDataSet(System.Data.DataSet,System.String,System.String)">
 <summary>
 Remplit la <see cref="T:System.Data.DataTable" /> d'un <see cref="T:System.Data.DataSet" /> à partir des données d'un 
 paramètre curseur Oracle, en spécifiant comme argument le <see cref="T:System.Data.DataSet" />, le nom de sa <see cref="T:System.Data.DataTable" />
 et le nom du paramètre curseur Oracle. Cette méthode retourne le <see cref="T:System.Data.DataSet" /> avec les données issues du curseur Oracle.
 </summary>
 <param name="_dsDonne">DataSet obtenu à partir du curseur Oracle nommé <paramref name="_strNomParametre" /></param>
 <param name="_strNomTable">Nom de la <see cref="T:System.Data.DataTable" /> du <see cref="T:System.Data.DataSet" /> <paramref name="_dsDonne" /></param>
 <param name="_strNomParametre">
   Nom du paramètre curseur qui est utilisé pour remplir la <see cref="T:System.Data.DataTable" /> 
   nommmée <paramref name="_strNomTable" /> du <see cref="T:System.Data.DataSet" /> <paramref name="_dsDonne" />
 </param>
 <returns>Le <see cref="T:System.Data.DataSet" />  <paramref name="_dsDonne" /> avec les données du curseur Oracle nommé <paramref name="_strNomParametre" /></returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="CnstrOraOdpStrRemplirDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="CnstrOraOdpStrRemplirDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IOracleOdp.RemplirTable(System.Data.DataTable,System.String)">
 <summary>
 Remplit une <see cref="T:System.Data.DataTable" /> à partir des données d'un paramètre curseur Oracle, en spécifiant comme argument 
 la <see cref="T:System.Data.DataTable" /> et le nom du paramètre curseur Oracle. Cette méthode retourne la <see cref="T:System.Data.DataTable" /> 
 avec les données issues du curseur Oracle.
 </summary>
 <param name="_dtDonne">DataTable obtenue à partir du curseur Oracle nommé <paramref name="_strNomParam" /></param>
 <param name="_strNomParam">Nom du paramètre curseur qui est utilisé pour remplir <paramref name="_dtDonne" /></param>
 <returns>La <see cref="T:System.Data.DataTable" />  <paramref name="_dtDonne" /> avec les données du curseur Oracle nommé <paramref name="_strNomParam" /></returns>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="RemplirTableExecProcParNom" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="RemplirTableExecProcParNom" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ExecuterProcParNom">
 <summary>
     Exécute la procédure stockée Oracle de sorte que ses paramètres doivent obligatoirement avoir le même nom que ceux ajoutés avec une méthode d'ajout
     de paramètres, comme par exemple <see cref="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection)" />. 
     Si un paramètre ajouté n'a pas le même nom que celui de la procédure stockée, alors à l'exécution de cette méthode, une exception de type 
     <see cref="T:Oracle.DataAccess.Client.OracleException">Oracle.DataAccess.Client.OracleException</see> est levée.
 </summary>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="RemplirTableExecProcParNom" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="RemplirTableExecProcParNom" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
 <remarks>
   <para>
     Contraitement à la présente méthode, <see cref="M:RAMQ.AccesDonnees.BasesDonnees.ExecuterProc" /> ne fait pas en sorte que les paramètres 
     doivent obligatoirement avoir le même nom que ceux ajoutés avec une méthode d'ajout de paramètres, comme par exemple :
     <ul>
       <li><see cref="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.Data.IDbDataParameter)" /></li>
       <li><see cref="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection)" /></li>
       <li><see cref="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection,System.Object)" /></li>
       <li><see cref="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Data.ParameterDirection)" /></li>
       <li><see cref="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Data.ParameterDirection,System.Object)" /></li>
       <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IProcOra.AjouterTablo(System.String,System.Int32,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Data.ParameterDirection)" /></li>
       <li><see cref="M:RAMQ.AccesDonnees.BDOracle.IProcOra.AjouterTablo``1(System.String,System.Int32,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Data.ParameterDirection,System.Collections.Generic.IEnumerable{``0})" /></li>
     </ul> 
   </para>
   <para>
     C'est plutôt l'ordre d'ajout du paramètre qui doit être le même que son ordre d'apparition dans la signature de la procédure stockée Oracle.
   </para>
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDOracle.OracleOdp">
 <summary> 
     Cette classe permet d'accéder à une base de données Oracle et effectuer des opérations sur ses objets. La classe se veut une version 
     plus élémentaire de <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> qui expose davantage de fonctionnalités. 
     <see cref="T:RAMQ.AccesDonnees.BDOracle.AccesDonnesOra" /> facilite notamment l'appel de procédures stockées Oracle et la gestion 
     automatique des transactions.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Sylvain Bussières<br/>
 Date   : 2005-03-14<br/>
 Description: Version originale sous le framework .NET 1.1<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-02-25<br/>
 Description:  Création de la version V2 de ce module (Copie de la 
               version CISEL)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Alexandre Chaussé-Paradis<br/>
 Date   : 2011-03-01<br/>
 Description:  Création de la version V4 de ce module (basé sur V2)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>    
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDOracle.OracleOdp.ParamConnexion">
 <summary>
 <b>Normalement éviter cette propriété, car elle exige de spécifier les paramètres de connexion (voir remarque).</b><br />
 Permet l'accès aux paramètres de connexion à la base de données Oracle dont le type est <see cref="T:Oracle.DataAccess.Client.OracleConnectionStringBuilder">
 Oracle.DataAccess.Client.OracleConnectionStringBuilder</see>. Les paramètres de connexion permettent notamment de définir l'identifiant de l'usager qui se 
 connecte, son mot de passe et la source de données (généralement l'alias du fichier <b><i>tnsnames.ora</i></b>).
 </summary>
 <value>Paramètres de connexion à la base de données Oracle</value>
 <returns>Paramètres de connexion à la base de données Oracle</returns>
 <remarks>
 <h3>Constructeur et propriété avec paramètres de connexion</h3><para>
      Normalement <b>éviter le constructeur suivant</b>, dont l'argument est une instance implémentant l'interface <see cref="T:System.Data.IDbConnection" />, 
      et la propriété suivante, car ils spécifient les <b>paramètres de connexion</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.Data.IDbConnection)" />;</li>
        <li><see cref="P:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ParamConnexion" />;</li>
      </ul>
    </para><para>
      La <b>pratique recommandée à la RAMQ</b> est plutôt d'utiliser l'un des constructeurs qui spécifient le nom d'un <b>fichier UDL</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String,System.String)" />;</li>
      </ul>      
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="CnstrOraOdpCnnParamConxn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="CnstrOraOdpCnnParamConxn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String)">
 <summary>
 Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> en spécifiant le nom du fichier UDL.
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL avec ou sans le chemin pour se connecter à la base de données</param>
 <remarks>
 <h3>Fichier UDL</h3><para>
	    Le paramètre <paramref name="_strNomFichUdl" /> peut ou ne pas contenir le chemin du fichier UDL. Si le chemin n'est pas spécifié et que 
	    le fichier a le format <b><i>&lt;PPP&gt;_&lt;SGBD&gt;.UDL</i></b>, le constructeur le cherche par défaut dans <b><i>D:\AuthnDonne\&lt;PPP&gt;\</i></b>. 
	    Notez bien que <b><i>&lt;SGBD&gt;</i></b> est <b><i>ORA</i></b> si par exemple on se connecte à une base de données Oracle.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="CnstrOraOdpStrRemplirDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="CnstrOraOdpStrRemplirDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String)">
 <summary>
 Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> en spécifiant le nom du fichier UDL et la chaîne de caractère d'une requête SQL à exécuter.
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL avec ou sans le chemin pour se connecter à la base de données</param>
 <param name="_strSQL">Chaîne de caractère d'une requête SQL à exécuter</param>
 <remarks>
 <h3>Fichier UDL</h3><para>
	    Le paramètre <paramref name="_strNomFichUdl" /> peut ou ne pas contenir le chemin du fichier UDL. Si le chemin n'est pas spécifié et que 
	    le fichier a le format <b><i>&lt;PPP&gt;_&lt;SGBD&gt;.UDL</i></b>, le constructeur le cherche par défaut dans <b><i>D:\AuthnDonne\&lt;PPP&gt;\</i></b>. 
	    Notez bien que <b><i>&lt;SGBD&gt;</i></b> est <b><i>ORA</i></b> si par exemple on se connecte à une base de données Oracle.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="CnstrOraOdpStrStr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="CnstrOraOdpStrStr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String,System.String)">
 <summary>
 Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> en spécifiant le nom du fichier UDL, la chaîne de caractère d'une requête SQL à exécuter et
 le nom donné à la table d'un <see cref="T:System.Data.DataSet" />.
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL avec ou sans le chemin pour se connecter à la base de données</param>
 <param name="_strSQL">Chaîne de caractère d'une requête SQL à exécuter</param>
 <param name="_strNomTable">Nom donné à la table d'un <see cref="T:System.Data.DataSet" /></param>
 <remarks>
 <h3>Fichier UDL</h3><para>
	    Le paramètre <paramref name="_strNomFichUdl" /> peut ou ne pas contenir le chemin du fichier UDL. Si le chemin n'est pas spécifié et que 
	    le fichier a le format <b><i>&lt;PPP&gt;_&lt;SGBD&gt;.UDL</i></b>, le constructeur le cherche par défaut dans <b><i>D:\AuthnDonne\&lt;PPP&gt;\</i></b>. 
	    Notez bien que <b><i>&lt;SGBD&gt;</i></b> est <b><i>ORA</i></b> si par exemple on se connecte à une base de données Oracle.
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="CnstrOraOdpStrStrStr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="CnstrOraOdpStrStrStr" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataTable" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.Data.IDbConnection)">
 <summary>
 <b>Normalement éviter ce constructeur, car il exige de spécifier les paramètres de connexion (voir remarque).</b><br />
 Crée une nouvelle instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> en spécifiant l'instance de connexion à la base de données Oracle qui implémente 
 l'interface <see cref="T:System.Data.IDbConnection" />.
 </summary>
 <param name="_cnnOracle">Instance de connexion à la base de données Oracle</param>
 <remarks>
 <h3>Constructeur et propriété avec paramètres de connexion</h3><para>
      Normalement <b>éviter le constructeur suivant</b>, dont l'argument est une instance implémentant l'interface <see cref="T:System.Data.IDbConnection" />, 
      et la propriété suivante, car ils spécifient les <b>paramètres de connexion</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.Data.IDbConnection)" />;</li>
        <li><see cref="P:RAMQ.AccesDonnees.BDOracle.IOracleOdp.ParamConnexion" />;</li>
      </ul>
    </para><para>
      La <b>pratique recommandée à la RAMQ</b> est plutôt d'utiliser l'un des constructeurs qui spécifient le nom d'un <b>fichier UDL</b> :
      <ul>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String)" />;</li>
        <li><see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.#ctor(System.String,System.String,System.String)" />;</li>
      </ul>      
    </para>
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="CnstrOraOdpCnnParamConxn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="ImptOracle" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="CnstrOraOdpCnnParamConxn" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtnDelmParam(System.String)">
 <summary>
 Obtient le délimiteur Oracle de paramètre concaténé avec la clé d'un nom de paramètre, afin de pouvoir les utiliser dans une requête SQL. 
 Cette méthode est l'implémentation de la méthode protégée <see cref="M:RAMQ.AccesDonnees.BasesDonnees.ObtnDelmParam(System.String)" /> 
 de <see cref="T:RAMQ.AccesDonnees.BasesDonnees" />. Elle ne peut être appelée que par cette classe.
 </summary>
 <param name="_strNomParam">Nom de clé du paramètre</param>
 <returns>Délimteur Oracle de paramètre concaténé avec la clé d'un nom de paramètre</returns>
 <remarks>
 Un paramètre Oracle est formé de son délimiteur "<c>:</c>" concaténé avec la clé du nom de paramètre. 
 Par exemple <c>:P1</c> dans la requête ci-dessous :<br/>
 <c>SELECT * FROM Dossier D WHERE D.No_Dos_Seq = :P1;</c>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.InitialiserConxn">
 <summary>
 Initialise la connexion à la base de données Oracle.
 Cette méthode est une implémentation de la méthode protégée <see cref="M:RAMQ.AccesDonnees.BasesDonnees.InitialiserConxn" /> 
 de <see cref="T:RAMQ.AccesDonnees.BasesDonnees" />. Elle ne peut être appelée que par cette classe.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.Modifier(System.Data.DataSet,System.Int32)">
 <summary>
 Effectue une modification en lot dans la base de données de chaque enregistrement mis à jour dans un <see cref="T:System.Data.DataSet" />
 passé en paramètre. Cette méthode permet d'appeler <see cref="M:Oracle.DataAccess.Client.OracleDataAdapter.Update(System.Data.DataSet)">
 Oracle.DataAccess.Client.OracleDataAdapter.Update(System.Data.DataSet)</see> en utilisant le type <see cref="T:Oracle.DataAccess.Client.OracleDataAdapter">
 Oracle.DataAccess.Client.OracleDataAdapter</see> correspondant au fournisseur ADO.NET Oracle. Elle est une implémentation de la méthode protégée 
 <see cref="M:RAMQ.AccesDonnees.BasesDonnees.Modifier(System.Data.DataSet,System.Int32)" /> de la classe <see cref="T:RAMQ.AccesDonnees.BasesDonnees" />. 
 Elle ne peut être appelée que par cette classe.
 </summary>
 <param name="_dsDonne">Le DataSet modifié dont les enregistrements mettent à jour la base de données</param>
 <param name="_intTailleLot">Nombre d'enregistrements impliqués dans la mise à jour par lot</param>
 <remarks>
 Cette méthode est entre autre appelée par les méthodes <see cref="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerDataSet(System.Data.DataSet)" /> et 
 <see cref="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerDataSet(System.Data.DataSet,System.Int32)" /> de la classe <see cref="T:RAMQ.AccesDonnees.BasesDonnees" />, 
 afin de modifier dans la base de données les enregistrements d'un <see cref="T:System.Data.DataSet" /> qui ont été mis à jour. 
 Voir l'exemple ci-dessous qui appelle <see cref="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerDataSet(System.Data.DataSet,System.Int32)" />.
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="EnrgtDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="EnrgtDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.Remplir(System.Data.DataSet)">
 <summary>
 Remplit un <see cref="T:System.Data.DataSet" /> passé en paramètre en se basant sur la <see cref="T:System.Data.DataTable" /> nommée 
 <see cref="P:RAMQ.AccesDonnees.BasesDonnees.NomTable" />.
 Cette méthode permet d'appeler <see cref="M:Oracle.DataAccess.Client.OracleDataAdapter.Fill(System.Data.DataSet)">
 Oracle.DataAccess.Client.OracleDataAdapter.Fill(System.Data.DataSet)</see> en utilisant le type 
 <see cref="T:Oracle.DataAccess.Client.OracleDataAdapter">Oracle.DataAccess.Client.OracleDataAdapter</see> correspondant au fournisseur ADO.NET Oracle.
 Elle est une implémentation de la méthode protégée <see cref="M:RAMQ.AccesDonnees.BasesDonnees.Remplir(System.Data.DataSet)" /> 
 de la classe <see cref="T:RAMQ.AccesDonnees.BasesDonnees" />. Elle ne peut être appelée que par cette classe.
 </summary>
 <param name="_dsDonne">Le DataSet à remplir</param>
 <returns>Le <see cref="T:System.Data.DataSet" />  <paramref name="_dsDonne" /> qui a été rempli</returns>
 <remarks>
 Cette méthode est entre autre appelée par la méthode ancêtre <see cref="M:RAMQ.AccesDonnees.BasesDonnees.RemplirDataSet(System.Data.DataSet)" /> de  la
 classe <see cref="T:RAMQ.AccesDonnees.BasesDonnees" />, afin de remplir un <see cref="T:System.Data.DataSet" />. Voir l'exemple ci-dessous qui appelle 
 <see cref="M:RAMQ.AccesDonnees.BasesDonnees.RemplirDataSet(System.Data.DataSet)" />.
 </remarks>
 <example>
 <code lang="VB.NET">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="EnrgtDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleVb\OracleOdpEx.vb" region="FinOracleOdpEx" />
 </code>
 <code lang="CSharp">
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="DebOracleOdpEx" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="EnrgtDataSet" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="AfficherDataRow" />
 <code source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\AccesDonnees\BDOracle\ExempleCs\OracleOdpEx.cs" region="FinOracleOdpEx" />
 </code>
 </example>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.RemplirDataSet(System.Data.DataSet,System.String,System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.RemplirTable(System.Data.DataTable,System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.EstNull(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirValParamRetou``1(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirValParamRetou``1">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirColctValParamRetou``1(System.String)">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ExecuterProcParNom">
 <inheritdoc />
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirColctValParamRetou``1(System.Array)">
 <summary>
 Obtenir la liste de valeur de type ("T") correspondante à un ensemble de valeur 
 recherchées.
 </summary>
 <typeparam name="T">Type correspondant à la valeur recherchée</typeparam>
 <param name="_objVal">Ensemble de valeur</param>
 <returns>Objet générique contenant la liste de valeur recherchées</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ConvertirDonneEnColctObjMetie``1(System.Data.IDataReader)">
 <summary>
 Méthode qui permet de convertir un DataReader en une collection de type T.
 </summary>
 <typeparam name="T">Type générique</typeparam>
 <param name="_drDonne">Données à tranférer dans la collection</param>
 <returns>
 Collection de type T contenant les données provenant du DataReader.
 </returns>
</member>
<member name="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.Dispose(System.Boolean)">
 <summary>                                                
 Libère toutes les ressources de l'instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" />. Cette méthode protégée ne peut être 
 appelée que par <see cref="M:RAMQ.AccesDonnees.BasesDonnees.Dispose" /> de la classe <see cref="T:RAMQ.AccesDonnees.BasesDonnees" /> 
 qui implémente <see cref="M:System.IDisposable.Dispose" /> de l'interface <see cref="T:System.IDisposable" />. Cette méthode protégée permet d'éviter les 
 appels redondants lors de la libération des ressources.
 </summary>
 <param name="disposing"><c>True</c> pour pouvoir libérer les ressources</param>
 <remarks>
 <para>
      Dès qu'une classe telle <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> implémente l'interface <see cref="T:System.IDisposable" />, l'utilisation 
      d'un bloc <c>Using ... End Using</c> est fortement recommandée lors de l'instanciation. Ceci permet de s'assurer que toutes les instances d'attributs 
      privés ou de propriétés publiques de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> sont libérées proprement et que la connexion à la base de 
      données est bien fermée. 
    </para><para>
      Prenez note qu'après avoir créé une instance de <see cref="T:RAMQ.AccesDonnees.BDOracle.OracleOdp" /> si une exception survient et qu'une connexion
      a été ouverte ou qu'une transaction est en cours, la connexion ne sera pas fermée et la transaction ne sera pas arrêtée tant que la libération de
      l'instance ne sera pas faite à l'appel de <see cref="M:RAMQ.AccesDonnees.BasesDonnees.Dispose" />. 
    </para>
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.NamespaceDoc">
 <summary>
 Cet espace de nom que l'on retrouve dans la composante <b>RAMQ.CO.COC2_V4FournAccesDonne_cpo</b> contient différentes classes 
 et interfaces permettant d'accéder aux bases de données supportées par la RAMQ.
 </summary>
 <remarks>
 <h3>Recommandation</h3>
 <para>
 Il est fortement recommandé d'utiliser les classes et interfaces contenues dans cette composante, bien que ce ne soit pas obligatoire.
 Elles simplifient la création des objets de connexion et offrent des facilités pour effectuer des appels à la base de données.
 </para>
 <h3>Bases de données supportées</h3>
 <para>
 Officiellement, les bases de données suivantes sont supportés à la RAMQ :
 <ul>
 <li>Oracle Database (voir l'espace de nom <see cref="N:RAMQ.AccesDonnees.BDOracle" />)</li>
 <li>Teradata Database (voir l'espace de nom <see cref="N:RAMQ.AccesDonnees.BDTeradata" />)</li>
 <li>Microsoft SQL Server qui supporte différents produits Microsoft (voir l'espace de nom <see cref="N:RAMQ.AccesDonnees.BDSql" />)</li>
 <li>Microsoft OLE DB qui supporte toute source de données OLE DB (voir l'espace de nom <see cref="N:RAMQ.AccesDonnees.BDOleDB" />)</li>
 </ul>
 Vous retrouverez les objets spécialisés pour vous connecter à ces différentes sources de données dans les différents espace de nom sous <see cref="N:RAMQ.AccesDonnees">
 RAMQ.AccesDonnees</see>.
 </para>
 <h3>Correspondance entre un enregistrement d'une table et un objet d'affaire (mapping)</h3>
 <para>
 Pour faciliter l'utilisation d'objet d'affaires (entité et transporteur), la composante vous offre la classe <see cref="T:RAMQ.AccesDonnees.RepositoryCurseur`1" />, 
 dont vous pouvez hériter, afin d'établir la correspondance entre une rangée d'information dans la base de données et une classe .NET à implémenter.
 </para>
 <para>
 Afin d'établir cette correspondance les propriétés de la classe .NET à implémenter doivent recourir à l'attribut <see cref="T:RAMQ.Attribut.ValeurEntite">
 RAMQ.Attribut.ValeurEntite</see>.
 </para>
 <h3>Gestion des CLOB et BLOB</h3>
 <para>
 Lorsque vous utilisez les composantes d'accès aux données de <b>RAMQ.CO.COC2_V4FournAccesDonne_cpo</b> et que vous désirez manipuler ces types, 
 vous devez utiliser les classes <see cref="T:RAMQ.AccesDonnees.Types.Clob">RAMQ.AccesDonnees.Types.Clob</see> et <see cref="T:RAMQ.AccesDonnees.Types.Blob">
 RAMQ.AccesDonnees.Types.Blob</see> qui indiqueront de manière claire les types natifs de la source de données à utiliser. De plus vous n'aurez pas à vous soucier 
 du moteur de base de données sous-jacent utilisé.
 </para>
</remarks>
</member>
<member name="T:RAMQ.AccesDonnees.Types.Blob">
 <summary>
 Cette classe est utilisée afin de représenter le type Blob. 
 Elle permettra à l'utilisateur de spécifier l'utilisation de 
 ce type sans avoir à ajouter une référence à Oracle, Teradata
 ou autres dans son projet.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.Types.Blob.Valeur">
 <summary>
 Propriété contenant la valeur en bytes d'un "Blob"
 </summary>
 <value><see cref="T:System.Byte"/></value>
 <returns><see cref="T:System.Byte"/></returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.Types.Clob">
 <summary>
 Cette classe est utilisée afin de représenter le type Clob.
 Elle permettra à l'utilisateur de spécifier l'utilisation de 
 ce type sans avoir à ajouter une référence à Oracle, Teradata
 ou autres dans son projet.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.Types.Clob.Valeur">
 <summary>
 Propriété contenant la valeur en bytes d'un "Clob"
 </summary>
 <value><see cref="T:System.String"/></value>
 <returns><see cref="T:System.String"/></returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.Types.TimeStamp">
 <summary>
 Cette classe est utilisée afin de représenter le type TimeStamp.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.Types.TimeStamp.Valeur">
 <summary>
 Propriété contenant la valeur en DateTime
 </summary>
 <value><see cref="T:System.DateTime"/></value>
 <returns><see cref="T:System.DateTime"/></returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BasesDonnees">
 <summary> 
 Classe de base permettant d'effectuer des opérations sur les bases de 
 données. Cette classe doit être héritée et elle implémente 
 <see cref="T:RAMQ.AccesDonnees.IBasesDonnees" />.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Sylvain Bussières<br/>
 Date   : 2005-03-14<br/>
 Description: Version originale sous le framework .NET 1.1<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-02-25<br/>
 Description:  Création de la version V2 de ce module (Copie de la 
               version CISEL)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Alexandre Chaussé-Paradis<br/>
 Date   : 2011-03-01<br/>
 Description:  Création de la version V4 de ce module (basé sur V2)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Jérémie Gravel<br/>
 Date   : 2016-07-28<br/>
 Description:  Modification à ExecuterCnsul pour fermer la connexion seulement
 lorsqu'elle est ouverte pendant ExecuterCnsul<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.strLogonIdUtilisateur">
 <summary>
 Chaîne de caractères contenant l'identifiant de la base de données
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.strPasswordUtilisateur">
 <summary>
 Chaîne de caractères contenant le mot de passe de la base de données
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.strDataSource">
 <summary>
 Chaîne de caractères contenant la source de données
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.strNomFichUDL">
 <summary>
 Nom et emplacement du Fichier UDL
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.cnnParamConxn">
 <summary>
 Objet <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> servant de 
 constructeur de chaine de connection 
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.cnnBD">
 <summary>
 Objet <see cref="T:System.Data.IDbConnection" /> servant pour la connexion à la 
 base de données
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.cmdBD">
 <summary>
 Objet <see cref="T:System.Data.IDbCommand" /> contenant la commande qui sera 
 exécutée sur la base de données
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.objTrxBD">
 <summary>
 Objet <see cref="T:System.Data.IDbTransaction" /> servant pour la gestion des 
 transactions sur la base de données
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.strNomTable">
 <summary>
 Chaîne de caractères contenant le nom de table dans le DataSet
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.colctEnsParam">
 <summary>
 Objet <see cref="T:System.Collections.IEnumerable" /> contenant des ensembles de 
 paramètres pour l'utilisation de procédures stockées
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.enuTypeExec">
 <summary>
 Variable d'énumération contenant le type d'exécution 
 <see cref="T:RAMQ.AccesDonnees.BasesDonnees.enumTypeExec" />
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.BasesDonnees.blnTransactionOuverte">
 <summary>
 Variable booléenne permettant de connaître l'état de la transaction
 </summary>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BasesDonnees.enumTypeExec">
 <summary>
 Énumérateur du type d'exécution
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.LogonIdUtilisateur">
 <summary>
 Obtient ou défini l'identifiant de connexion à la base de données
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.PasswordUtilisateur">
 <summary>
 Obtient ou défini le mot de passe pour la connexion à la base 
 de données
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.DataSource">
 <summary>
 Obtient ou défini la source de données pour la connexion à la base 
 de données
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.NomFichUDL">
 <summary>
 Obtient ou défini le nom et l'emplacement du fichier UDLpour la 
 connexion à la base de données
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.ParamConxn">
 <summary>
 Obtient ou défini l'objet <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
 servant de constructeur de chaine de connection
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.EnsParam">
 <summary>
 Objet <see cref="T:System.Collections.IList" /> contenant des ensembles de 
 paramètres pour l'utilisation de procédures stockées
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.TypeExec">
 <summary>
 Obtient ou définie l'énumérateur du type d'exécution
 </summary>
 <value><see cref="T:RAMQ.AccesDonnees.BasesDonnees.enumTypeExec" /></value>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.TransactionOuverte">
 <summary>
 Obtient ou définie l'état d'ouverture de la transaction
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.TransactionBD">
 <summary>
 Obtient ou définie l'object de transaction avec la base de données.
 </summary>
 <value><see cref="T:System.Data.IDbTransaction" /></value>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.Connexion">
 <summary>
 Propriété permettant d'obtenir ou de définir l'objet de 
 connexion à la base de données.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.Commande">
 <summary>
 Obtient ou définie l'objet la commande qui sera exécutée sur la 
 base de données
 </summary>
 <value><see cref="T:System.Data.IDbCommand" /></value>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.TimeOutCommande">
 <summary>
 Propriété permettant d'obtenir ou de définir le délais avant 
 d'obtenir un timeout.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.NomTable">
 <summary>
 Propriété permettant d'obtenir ou de définir le nom de la table
 sur laquelle des actions sertont faites.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.SQL">
 <summary>
 Propriété permettant d'obtenir ou de définir la requête SQL à
 exécuter sur la base de données.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.ObtenirEnsembleParam(System.Int32)">
 <summary>
 Propriété permettant d'obtenir la liste des paramètres dans un
 élément énumérable.
 </summary>
 <param name="_intIndex">L'index des paramètres à retourner</param>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.EtatConxn">
 <summary>
 Obtient l'état de fermeture de la connexion
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BasesDonnees.PartaConxn">
 <summary>
 Obtient si la connexion a été partagée à un enfant
 </summary>
 <value> Boolean </value>
 <returns> Vrai si la connexion est partagée entre un parent et un enfant </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.#ctor(System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL pour la connexion</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.#ctor(System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL pour la connexion</param>
 <param name="_strSQL">SQL à exécuter</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 et du nom de la table
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL pour la connexion</param>
 <param name="_strSQL">SQL à exécuter</param>
 <param name="_strNomTable">Nom donné à la table dans un DataSet</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.#ctor(System.Data.IDbConnection)">
 <summary>
 Constructeur de la classe. 
 </summary>
 <param name="_cnn"> Objet de connexion </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ObtnDelmParam(System.String)">
 <summary>
 Propriété permettant d'obtenir le délimiteur des paramètres transmis
 à une commande SQL en fonction de son type de connection
 </summary>
 <param name="_strNomParam">Nom de clé du paramètre</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.InitialiserConxn">
 <summary>
 Méthode devant être implémantée par toute classe dérivée et qui 
 permet l'initialisation et la création de la connexion au fournisseur
 d'accès au données désiré.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.Modifier(System.Data.DataSet,System.Int32)">
 <summary>
 Méthode devant être implémantée par toute classe dérivée et qui 
 permet d'appeler la méthode "Update(DataSet)" en utilisant le bon 
 type de "DataAdapter".
 </summary>
 <param name="_dsDonne">Le Dataset à modifier</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.Remplir(System.Data.DataSet)">
 <summary>
 Méthode devant être implémantée par toute classe dérivée et qui 
 permet d'appeler la méthode "Fill(DataSet)" en utilisant le bon 
 type de "DataAdapter".
 </summary>
 <param name="_dsDonne">Le Dataset à remplir</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.InitialiserChnConxn">
 <summary>
 Permet l'initialisation de la chaîne de connexion.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ObtenirParamConxn(System.String)">
 <summary>
 Retourne, dans un tableau, les éléments de la chaîne de connexion.
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ObtenirInfoConnexion(System.String)">
 <summary>
 Extraire le logon, le mot de passe et la source de donnée du fichier UDL
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.InfoUDL(System.String[],System.String)">
 <summary>
 Cette procédure permet d'extraire une clé d'un tableau d'élément
 </summary>
 <param name="_strTblParam">Liste de paramètres</param>
 <param name="_strCle">Clé de recherche</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.LireFichierUDL(System.String)">
 <summary>
 Lire le contenu du fichier UDL en mode texte.
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.OuvrirCnn(System.Boolean@)">
 <summary>
 Ouverture de la connexion
 </summary>
 <param name="_blnOuverImplicite">Pour indiquer que l'ouverture est
                                  implicite, cad ouverture auto par l'objet
 </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.FermerCnn(System.Boolean)">
 <summary>
 Fermeture de la connexion
 </summary>
 <param name="_blnOuverImplicite">Pour indiquer que l'ouverture est
                                  implicite, car ouverture auto par l'objet
 </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.AnnulerTransaction(System.Boolean)">
 <summary>
 Annuler la transaction
 </summary>
 <param name="_blnOuverImplicite">Pour indiquer que l'ouverture est
                                  implicite, cad ouverture auto par l'objet
 </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.MajParam(System.Collections.IEnumerable)">
 <summary>
 Maj des param de la commande SQL dans le cas où la même req SQL est exécuter
 plusieurs fois avec des param différents
 </summary>
 <param name="_colctParam">Objet énumérable des paramètres servant à la MAJ
 </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.PreparerParam">
 <summary>
 Préparer les param de la requête SQL. Cela va créer les paramètres de la commande
 selon le tableau en entrée et leur affecte la valeur également
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.PreparerParam(System.Collections.IEnumerable)">
 <summary>
 Préparer les param de la requête SQL. Cela va créer les paramètres de la commande
 selon le tableau en entrée et leur affecte la valeur également
 </summary>
 <param name="_colctParam">Objet énumérable des paramètres servant à la MAJ
 </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.Remplir``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Permet d'appeler la méthode "Fill" en utilisant le DataAdapter
 correspondant au provider ADO.NET utilisé.
 </summary>
 <param name="_colctDonne">La collection énumérable à remplir</param>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.Modifier``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 Méthode devant être implémantée par toute classe dérivée et qui 
 permet d'appeler la méthode "Update" en utilisant le bon 
 type de "DataAdapter".
 </summary>
 <typeparam name="T">Type de la collection</typeparam>
 <param name="_colctDonne">La collection générique de données à 
 modifier</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.FichierUDL(System.String)">
 <summary>
 Cette procédure permet d'obtenir le nom du fichier UDL avec son répertoire
 </summary>
 <param name="_strNomFichUdl">Nom du fichier UDL</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.InitConnexion">
 <summary>
 Permet d'initialiser la connexion
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.Convertir2Blob(System.String[],RAMQ.Enumeration.EnumTypeFormatDB,System.Data.DataRow@)">
 <summary>
     Convertir le contenu en blob.
 </summary>        
 <param name="_strNomBlob">Tableau des noms des variables</param>
 <param name="_enuTypFormat">Format d'encodage.</param>
 <param name="_rowGenerique">Nom de la table du dataset</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ConvertirBlob2String(System.String[],RAMQ.Enumeration.EnumTypeFormatDB,System.Data.DataRow@)">
 <summary>
     Convertir le contenu blob en string.
 </summary>        
 <param name="_strNomBlob">Tableau des noms des variables</param>
 <param name="_enuTypFormat">Format d'encodage.</param>
 <param name="_rowGenerique">Nom de la table du dataset</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.AjouterEnsParam(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Méthode permettant d'ajouter une collection de paramètres à 
 l'aide d'un objet énumérable.
 </summary>
 <param name="_colctParam">Objet Enumérable contenant les paramètres
 à ajouter</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="AjouterEnsParam"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="AjouterEnsParam"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ViderEnsParam">
 <summary>
 Méthode permettant d'enlever l'ensemble des paramètres.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ViderEnsParam"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ViderEnsParam"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.OuvrirCnn">
 <summary>
 Ouvrir la connexion à la BD
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="OuvrirCnn"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="OuvrirCnn"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.FermerCnn">
 <summary>
 Méthode permettant de fermer une connection à la base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="FermerCnn"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="FermerCnn"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.DebuterTransaction">
 <summary>
 Méthode permettant de démarrer un traitement transactionnel dans 
 la base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="DebuterTransaction"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="DebuterTransaction"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.TerminerTransaction">
 <summary>
 Méthode permettant de terminer un traitement transactionnel dans 
 la base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="TerminerTransaction"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="TerminerTransaction"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.AnnulerTransaction">
 <summary>
 Méthode permettant d'annuler un traitement transactionnel dans la
 base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="AnnulerTransaction"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="AnnulerTransaction"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerDataSet(System.Data.DataSet)">
 <summary>
 Méthode permettant d'enregistrer les données d'un DataSet dans
 la base de données.
 </summary>
 <param name="_dsDonne">DataSet contenant les informations à 
 enregistrer</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerDataSet"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerDataSet"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerDataSet(System.Data.DataSet,System.Int32)">
 <summary>
 Méthode permettant d'enregistrer les données d'un DataSet dans
 la base de données.
 </summary>
 <param name="_dsDonne">DataSet contenant les informations à 
 enregistrer</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerDataSetTailleLot"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerDataSetTailleLot"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerColct``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Méthode permettant d'enregistrer les données d'un objet énumérable
 dans la base de données.
 </summary>
 <param name="_colctDonne">Objet énumérable contenant les informations
 à enregistrer</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerColct"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerColct"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerColct``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 Méthode permettant d'enregistrer les données d'un objet énumérable
 dans la base de données.
 </summary>
 <param name="_colctDonne">Objet énumérable contenant les informations
 à enregistrer</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerColctTailleLot"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerColctTailleLot"></code>
 </example>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerDataSet(System.Data.DataSet,System.String[],RAMQ.Enumeration.EnumTypeFormatDB)">
 <summary>
 Méthode permettant d'enregistrer les données d'un DataSet dans
 la base de données, en fonction des noms du champs "Blob" et du 
 type de format des données à inscrire dans la base de données.
 </summary>
 <param name="_dsDonne">DataSet contenant les informations à 
 enregistrer</param>
 <param name="_strNomBlob"> Nom du champs blob </param>
 <param name="_enuTypFormat"> Énumération représenant le type d'encodage
 du champs Blob </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerDataSetColctBlobTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerDataSetColctBlobTypeFormat"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.EnregistrerColct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},RAMQ.Enumeration.EnumTypeFormatDB)">
 <summary>
   Méthode permettant d'enregistrer les données d'un objet énumérable
   dans la base de données, en fonction des noms du champs "Blob" et  
   du type de format des données à inscrire dans la base de données.
 </summary>
 <param name="_colctDonne">Objet énumérable contenant les informations
 à enregistrer</param>
 <param name="_strNomBlob"> Nom du champs blob </param>
 <param name="_enuTypFormat"> Énumération représenant le type d'encodage
 du champs Blob </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerColctTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerColctTypeFormat"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.RemplirDataSet(System.Data.DataSet)">
 <summary>
 Méthode permettant de remplir un DataSet fourni en paramètre avec 
 les éléments présent dans la base de données en fonction de la 
 requête <see cref="P:IBasesDonnees.SQL"/> préalablement fournie.
 </summary>
 <param name="_dsDonne">DataSet contenant la structure des éléments
 devant être retourné</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirDataSet"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirDataSet"></code>
 </example>
 <returns> DataSet contenant les données </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.RemplirColct``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
  <p style="color:#C62">
   <strong>A Noter : l'utilisation de cette fonctionnalité ne doit pas
           être prévu dans un contexte de performance</strong>
 </p>
 Remplir un objet énumérable avec les données de la BD
  <p style="color:#CCC">
   <strong><i>Remarque : Ne pas utiliser cette fonction pour obtenir 
              le RefCursor d'une Procédure. Dans ce cas, utilisez plutôt
              <see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirValParamRetou``1"></see>(Of T as Class)()</i></strong>
 </p>
 </summary>
 <param name="_colctDonne">Objet énumérable contenant la structure
 des informations qui seront retournées</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirColct"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirColct"></code>
 </example>
 <returns>Objet énumérable contenant les données </returns>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.RemplirDataSet(System.String[],RAMQ.Enumeration.EnumTypeFormatDB,System.Data.DataSet)">
 <summary>
 Méthode permettant de remplir un DataSet fourni en paramètre avec 
 les éléments présent dans la base de données en fonction de la 
 requête <see cref="P:IBasesDonnees.SQL"/> préalablement fournie,
 du nom des champs "Blob" ainsi que de leur format fournis en
 paramètres.
 </summary>
 <param name="_strNomBlob">Nom des champs "Blob" à remplir</param>
 <param name="_enuTypFormat">Énumérateur contenant le format des 
 champs "Blob" à remplir</param>
 <param name="_dsDonne">DataSet contenant la structure des éléments
 devant être retourné</param>
 <returns>Un dataset rempli avec les données</returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirDataSetBlobTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirDataSetBlobTypeFormat"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.RemplirColct``1(System.Collections.Generic.IEnumerable{System.String},RAMQ.Enumeration.EnumTypeFormatDB,System.Collections.Generic.IEnumerable{``0})">
 <summary>
  <p style="color:#C62">
   <strong>A Noter : l'utilisation de cette fonctionnalité ne doit pas
           être prévu dans un contexte de performance</strong>
 </p>
 Remplir un objet énumérable avec les données de la base de données.    
  <p style="color:#CCC">
   <strong><i>Remarque : Ne pas utiliser cette fonction pour obtenir 
              le RefCursor d'une Procédure. Dans ce cas, utilisez plutôt
              <see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirValParamRetou``1"></see>(Of T as Class)()</i></strong>
 </p>
 </summary>        
 <param name="_strNomBlob">Tableau des noms des variables de type blob</param>
 <param name="_enuTypFormat">Type du format d'encodage</param>
 <param name="_colctDonne">Objet énumérable contenant la collection à remplir</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirColctBlobTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirColctBlobTypeFormat"></code>
 </example>
 <returns>Objet énumérable contenant la collection remplie</returns>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.InitialiserProc(RAMQ.AccesDonnees.IProcedure)">
 <summary>
 Faire l'initialisation de la procédure
 </summary>
 <param name="_objProc">Procédure à initialiser basée sur l'interface <see cref="T:RAMQ.AccesDonnees.IProcedure" /></param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ExecuterProc">
 <summary>
 Faire l'exécution de la procédure 
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ExecuterMaj">
 <summary>
 Exécution le SQL pour la mise à jour de la BD
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ExecuterMaj"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ExecuterMaj"></code>
 </example>
 <returns>Nombre de rangés mises à jour</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ExecuterCnsul">
 <summary>
 Faire l'exécution du SQL en consultation
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ExecuterConsul"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ExecuterConsul"></code>
 </example>
 <returns>Rapport obtenu de type <see cref="T:System.Data.IDataReader" /></returns>
 <remarks>S'assurer de fermer le DataReader. Le mieux c'est d'utiliser un "Using" avec le DataReader.</remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BasesDonnees.ExecuterScalar">
 <summary>
 Faire l'exécution du SQL en consultation qui retourne seulement une valeur
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ExecuterScalar"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ExecuterScalar"></code>
 </example>
 <returns>Valeur obtenue de l'exécution du SQL</returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDTeradata.ITeradataNatif">
 <summary> 
 Définition de l'interface représentant les fonctionnalités disponibles
 pour interagir avec les bases de données Teradata.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDTeradata.ITeradataNatif.ParamConnexion">
 <summary>
 Obtient ou défini l'objet <see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder" />
 servant de constructeur de chaine de connection
 </summary>
 <value><see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder" /></value>
 <returns><see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder" /></returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDTeradata.TeradataNatif">
 <summary> 
 Cette classe permet d'effectuer des opérations sur Teradata. 
 <see cref="T:RAMQ.AccesDonnees.IBasesDonnees" />.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Sylvain Bussières<br/>
 Date   : 2005-03-14<br/>
 Description: Version originale sous le framework .NET 1.1<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-02-25<br/>
 Description:  Création de la version V2 de ce module (Copie de la 
               version CISEL)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Alexandre Chaussé-Paradis<br/>
 Date   : 2011-03-01<br/>
 Description:  Création de la version V4 de ce module (basé sur V2)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.ParamConnexion">
 <summary>
 Obtient ou défini l'objet <see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder" />
 servant de constructeur de chaine de connection
 </summary>
 <value><see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder" /></value>
 <returns><see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder" /></returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.ChoisirCharSet">
 <summary>
 Énumérateur du type d'exécution
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.#ctor(System.String)">
 <summary>
 Constructeur de la classe. 
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.#ctor(System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <param name="_strSQL"> SQL à exécuter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 et du nom de la table
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <param name="_strSQL"> SQL à exécuter </param>
 <param name="_strNomTable"> Nom donné à la table dans un DataSet </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.ObtnDelmParam(System.String)">
 <summary>
 Propriété permettant d'obtenir le délimiteur des paramètres transmis
 à une commande SQL en fonction de son type de connection
 </summary>
 <param name="_strNomParam">Nom de clé du paramètre</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.InitialiserConxn">
 <summary>
 Permet la création de la connexion.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.Modifier(System.Data.DataSet,System.Int32)">
 <summary>
 Permet d'appeler la méthode "Update" en utilisant le type le
 DataAdapter correspondand au provider ADO.NET utilisé.
 </summary>
 <param name="_dsDonne">Le Dataset à modifier</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.Remplir(System.Data.DataSet)">
 <summary>
 Permet d'appeler la méthode "Fill" en utilisant le DataAdapter
 correspondant au provider ADO.NET utilisé.
 </summary>
 <param name="_dsDonne">Le Dataset à modifier</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDTeradata.TeradataNatif.ObtenirValeurODBC(System.String,System.String)">
 <summary>
 Obtenir une valeur de clé ODBC à partir du datasource
 </summary>
 <param name="_strDataSource">Datasource recherché.</param>
 <param name="_strCle">Nom de la clé.</param>
 <returns>Valeur de la clé ODBC.</returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.IBasesDonnees">
 <summary> 
 Définition de l'interface représentant les fonctionnalités minimales
 disponibles sur les bases de données.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.Connexion">
 <summary>
 Propriété permettant d'obtenir ou de définir l'objet de 
 connexion à la base de données.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.Commande">
 <summary>
 Propriété permettant d'obtenir ou de définir la commande à 
 exécutée.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.TimeOutCommande">
 <summary>
 Propriété permettant d'obtenir ou de définir le délais avant 
 d'obtenir un timeout.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.NomTable">
 <summary>
 Propriété permettant d'obtenir ou de définir le nom de la table
 sur laquelle des actions sertont faites.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.SQL">
 <summary>
 Propriété permettant d'obtenir ou de définir la requête SQL à
 exécuter sur la base de données.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.ObtenirEnsembleParam(System.Int32)">
 <summary>
 Propriété permettant d'obtenir la liste des paramètres dans un
 élément énumérable.
 </summary>
 <param name="_intIndex">L'index des paramètres à retourner</param>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.EtatConxn">
 <summary>
 Obtient l'état de fermeture de la connexion
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IBasesDonnees.PartaConxn">
 <summary>
 Obtient si la connexion a été partagée à un enfant
 </summary>
 <value> Boolean </value>
 <returns> Vrai si la connexion est partagée entre un parent et un enfant </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.AjouterEnsParam(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Méthode permettant d'ajouter une collection de paramètres à 
 l'aide d'un objet énumérable.
 </summary>
 <param name="_colctParam">Objet Enumérable contenant les paramètres
 à ajouter</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="AjouterEnsParam"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="AjouterEnsParam"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.ViderEnsParam">
 <summary>
 Méthode permettant d'enlever l'ensemble des paramètres.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ViderEnsParam"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ViderEnsParam"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.OuvrirCnn">
 <summary>
 Méthode permettant d'ouvrir une connection à la base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="OuvrirCnn"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="OuvrirCnn"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.FermerCnn">
 <summary>
 Méthode permettant de fermer une connection à la base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="FermerCnn"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="FermerCnn"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.DebuterTransaction">
 <summary>
 Méthode permettant de démarrer un traitement transactionnel dans 
 la base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="DebuterTransaction"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="DebuterTransaction"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.TerminerTransaction">
 <summary>
 Méthode permettant de terminer un traitement transactionnel dans 
 la base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="TerminerTransaction"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="TerminerTransaction"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.AnnulerTransaction">
 <summary>
 Méthode permettant d'annuler un traitement transactionnel dans la
 base de données.
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="AnnulerTransaction"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="AnnulerTransaction"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.EnregistrerDataSet(System.Data.DataSet)">
 <summary>
 Méthode permettant d'enregistrer les données d'un DataSet dans
 la base de données.
 </summary>
 <param name="_dsDonne">DataSet contenant les informations à 
 enregistrer</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerDataSet"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerDataSet"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.EnregistrerDataSet(System.Data.DataSet,System.Int32)">
 <summary>
 Méthode permettant d'enregistrer les données d'un DataSet dans
 la base de données.
 </summary>
 <param name="_dsDonne">DataSet contenant les informations à 
 enregistrer</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerDataSetTailleLot"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerDataSetTailleLot"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.EnregistrerColct``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Méthode permettant d'enregistrer les données d'un objet énumérable
 dans la base de données.
 </summary>
 <param name="_colctDonne">Objet énumérable contenant les informations
 à enregistrer</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerColct"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerColct"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.EnregistrerColct``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
 <summary>
 Méthode permettant d'enregistrer les données d'un objet énumérable
 dans la base de données.
 </summary>
 <param name="_colctDonne">Objet énumérable contenant les informations
 à enregistrer</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerColctTailleLot"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerColctTailleLot"></code>
 </example>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.EnregistrerDataSet(System.Data.DataSet,System.String[],RAMQ.Enumeration.EnumTypeFormatDB)">
 <summary>
 Méthode permettant d'enregistrer les données d'un DataSet dans
 la base de données, en fonction des noms du champs "Blob" et du 
 type de format des données à inscrire dans la base de données.
 </summary>
 <param name="_dsDonne">DataSet contenant les informations à 
 enregistrer</param>
 <param name="_strNomBlob"> Nom du champs blob </param>
 <param name="_enuTypFormat"> Énumération représenant le type d'encodage
 du champs Blob </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerDataSetColctBlobTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerDataSetColctBlobTypeFormat"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.EnregistrerColct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},RAMQ.Enumeration.EnumTypeFormatDB)">
 <summary>
   Méthode permettant d'enregistrer les données d'un objet énumérable
   dans la base de données, en fonction des noms du champs "Blob" et  
   du type de format des données à inscrire dans la base de données.
 </summary>
 <param name="_colctDonne">Objet énumérable contenant les informations
 à enregistrer</param>
 <param name="_colctNomBlob"> Nom du champs blob </param>
 <param name="_enuTypFormat"> Énumération représenant le type d'encodage
 du champs Blob </param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="EnregistrerColctTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="EnregistrerColctTypeFormat"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.RemplirDataSet(System.Data.DataSet)">
 <summary>
 Méthode permettant de remplir un DataSet fourni en paramètre avec 
 les éléments présent dans la base de données en fonction de la 
 requête <see cref="P:IBasesDonnees.SQL"/> préalablement fournie.
 </summary>
 <param name="_dsDonne">DataSet contenant la structure des éléments
 devant être retourné</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirDataSet"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirDataSet"></code>
 </example>
 <returns> DataSet contenant les données </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.RemplirColct``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
  <p style="color:#C62">
   <strong>A Noter : l'utilisation de cette fonctionnalité ne doit pas
           être prévu dans un contexte de performance</strong>
 </p>
 Remplir un objet énumérable avec les données de la BD
  <p style="color:#CCC">
   <strong><i>Remarque : Ne pas utiliser cette fonction pour obtenir 
              le RefCursor d'une Procédure. Dans ce cas, utilisez plutôt
              <see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirValParamRetou``1"></see>(Of T as Class)()</i></strong>
 </p>
 </summary>
 <param name="_colctDonne">Objet énumérable contenant la structure
 des informations qui seront retournées</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirColct"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirColct"></code>
 </example>
 <returns>Objet énumérable contenant les données </returns>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.RemplirDataSet(System.String[],RAMQ.Enumeration.EnumTypeFormatDB,System.Data.DataSet)">
 <summary>
 Méthode permettant de remplir un DataSet fourni en paramètre avec 
 les éléments présent dans la base de données en fonction de la 
 requête <see cref="P:IBasesDonnees.SQL"/> préalablement fournie,
 du nom des champs "Blob" ainsi que de leur format fournis en
 paramètres.
 </summary>
 <param name="_strNomBlob">Nom des champs "Blob" à remplir</param>
 <param name="_enuTypFormat">Énumérateur contenant le format des 
 champs "Blob" à remplir</param>
 <param name="_dsDonne">DataSet contenant la structure des éléments
 devant être retourné</param>
 <returns>Un dataset rempli avec les données</returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirDataSetBlobTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirDataSetBlobTypeFormat"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.RemplirColct``1(System.Collections.Generic.IEnumerable{System.String},RAMQ.Enumeration.EnumTypeFormatDB,System.Collections.Generic.IEnumerable{``0})">
 <summary>
  <p style="color:#C62">
   <strong>A Noter : l'utilisation de cette fonctionnalité ne doit pas
           être prévu dans un contexte de performance</strong>
 </p>
 Remplir un objet énumérable avec les données de la base de données.    
  <p style="color:#CCC">
   <strong><i>Remarque : Ne pas utiliser cette fonction pour obtenir 
              le RefCursor d'une Procédure. Dans ce cas, utilisez plutôt
              <see cref="M:RAMQ.AccesDonnees.BDOracle.OracleOdp.ObtenirValParamRetou``1"></see>(Of T as Class)()</i></strong>
 </p>
 </summary>        
 <param name="_colctNomBlob">Tableau des noms des variables de type blob</param>
 <param name="_enuTypFormat">Type du format d'encodage</param>
 <param name="_colctDonne">Objet énumérable contenant la collection à remplir</param>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="RemplirColctBlobTypeFormat"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="RemplirColctBlobTypeFormat"></code>
 </example>
 <returns>Objet énumérable contenant la collection remplie</returns>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.InitialiserProc(RAMQ.AccesDonnees.IProcedure)">
 <summary>
 Faire l'initialisation de la procédure
 </summary>
 <param name="_objProc">Procédure à initialiser basée sur l'interface <see cref="T:RAMQ.AccesDonnees.IProcedure" /></param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.ExecuterProc">
 <summary>
 Faire l'exécution de la procédure 
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.ExecuterMaj">
 <summary>
 Exécution le SQL pour la mise à jour de la BD
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ExecuterMaj"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ExecuterMaj"></code>
 </example>
 <returns>Nombre de rangés mises à jour</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.ExecuterCnsul">
 <summary>
 Faire l'exécution du SQL en consultation
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ExecuterConsul"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ExecuterConsul"></code>
 </example>
 <returns>Rapport obtenu de type <see cref="T:System.Data.IDataReader" /></returns>
 <remarks>S'assurer de fermer le DataReader. Le mieux c'est d'utiliser un "Using" avec le DataReader.</remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IBasesDonnees.ExecuterScalar">
 <summary>
 Faire l'exécution du SQL en consultation qui retourne seulement une valeur
 </summary>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.vb" region="ExecuterScalar"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\BaseDonnees.cs" region="ExecuterScalar"></code>
 </example>
 <returns>Valeur obtenue de l'exécution du SQL</returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.IProcedure">
 <summary> 
 Définition de l'interface représentant les fonctionnalités pour 
 l'exécution des procédures stockées de la base de données. Cette 
 interface hérite du type <see cref="T:System.Collections.IEnumerable" />.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IProcedure.Nom">
 <summary>
 Nom de la procedure   
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.IProcedure.Item(System.String)">
 <summary>
 Item de la collection de paramètre à l'index spécifié  
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.Data.IDbDataParameter)">
 <summary>
 Ajouter un paramètre dans la collection des paramètres
 </summary>
 <param name="_prmParam">Paramètre de type <see cref="T:System.Data.IDbDataParameter" /> à ajouter</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom">Nom du paramètre à ajouter</param>
 <param name="_objType">Type du paramètre à ajouter</param>
 <param name="_intLongueur">Longueur du paramètre à ajouter</param>
 <param name="_prmDirection">Direction du paramètre à ajouter, basé sur un <see cref="T:System.Data.ParameterDirection" /></param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection,System.Object)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom">Nom du paramètre à ajouter</param>
 <param name="_objType">Type du paramètre à ajouter</param>
 <param name="_intLongueur">Longueur du paramètre à ajouter</param>
 <param name="_prmDirection">Direction du paramètre à ajouter, basé sur un <see cref="T:System.Data.ParameterDirection" /></param>
 <param name="_objValeur">Valeur du paramètre à ajouter</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Data.ParameterDirection)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom">Nom du paramètre à ajouter</param>
 <param name="_objType">Type du paramètre à ajouter</param>
 <param name="_prmDirection">Direction du paramètre à ajouter, basé sur un <see cref="T:System.Data.ParameterDirection" /></param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IProcedure.Ajouter(System.String,System.Object,System.Data.ParameterDirection,System.Object)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom">Nom du paramètre à ajouter</param>
 <param name="_objType">Type du paramètre à ajouter</param>
 <param name="_prmDirection">Direction du paramètre à ajouter, basé sur un <see cref="T:System.Data.ParameterDirection" /></param>
 <param name="_objValeur">Valeur du paramètre à ajouter</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.IProcedure.Supprimer(System.String)">
 <summary>
 Supprimer un paramètre de la collection des paramètres
 </summary>
 <param name="_strNom">Nom du paramètre à supprimer</param>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.IRepository`1">
 <summary> 
 Interface servant à la création / utilisation d'un repository d'item
 <see cref="T:RAMQ.AccesDonnees.IBasesDonnees" />.
 </summary>
 <remarks>
 Auteur : Pierre Deblois <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDOleDB.IOleDB">
 <summary> 
 Définition de l'interface représentant les fonctionnalités disponibles
 pour interagir avec les bases de données OLE DB.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDOleDB.IOleDB.ParamConnexion">
 <summary>
 Obtient ou défini l'objet <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
 servant de constructeur de chaine de connection
 </summary>
 <value><see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /></value>
 <returns><see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /></returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDOleDB.OleDB">
 <summary>
 Cette classe permet d'effectuer des opérations sur BD Oracle (ODP).
 <see cref="T:RAMQ.AccesDonnees.IBasesDonnees" />.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Sylvain Bussières<br/>
 Date   : 2005-03-14<br/>
 Description: Version originale sous le framework .NET 1.1<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-02-25<br/>
 Description:  Création de la version V2 de ce module (Copie de la 
               version CISEL)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Alexandre Chaussé-Paradis<br/>
 Date   : 2011-03-01<br/>
 Description:  Création de la version V4 de ce module (basé sur V2)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>    
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDOleDB.OleDB.ParamConnexion">
 <summary>
 Obtient ou défini l'objet <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
 servant de constructeur de chaine de connection
 </summary>
 <value><see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /></value>
 <returns><see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /></returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOleDB.OleDB.#ctor(System.String)">
 <summary>
 Constructeur de la classe. 
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOleDB.OleDB.#ctor(System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <param name="_strSQL"> SQL à exécuter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOleDB.OleDB.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 et du nom de la table
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <param name="_strSQL"> SQL à exécuter </param>
 <param name="_strNomTable"> Nom donné à la table dans un DataSet </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOleDB.OleDB.ObtnDelmParam(System.String)">
 <summary>
 Propriété permettant d'obtenir le délimiteur des paramètres transmis
 à une commande SQL en fonction de son type de connection
 </summary>
 <param name="_strNomParam">Nom de clé du paramètre</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOleDB.OleDB.InitialiserConxn">
 <summary>
     Permet la création de la connexion OleDB.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOleDB.OleDB.Modifier(System.Data.DataSet,System.Int32)">
 <summary>
 Permet d'appeler la méthode "Update" en utilisant le type le
 DataAdapter correspondand au provider ADO.NET utilisé.
 </summary>
 <param name="_dsDonne">Le Dataset à modifier</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDOleDB.OleDB.Remplir(System.Data.DataSet)">
 <summary>
 Permet d'appeler la méthode "Fill" en utilisant le DataAdapter
 correspondant au provider ADO.NET utilisé.
 </summary>
 <param name="_dsDonne">Le Dataset à remplir</param>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.ITraitementErreur">
 <summary> 
 Interface servant au traitement des erreurs
 </summary>
 <remarks>
 Auteur : Pierre Deblois <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDSql.ISqlNatif">
 <summary> 
 Définition de l'interface représentant les fonctionnalités disponibles
 pour interagir avec les bases de données SQL Serveur.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDSql.ISqlNatif.ParamConnexion">
 <summary>
 Obtient ou défini l'objet <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
 servant de constructeur de chaine de connection
 </summary>
 <value><see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /></value>
 <returns><see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /></returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.BDSql.SqlNatif">
 <summary> 
 Cette classe permet d'effectuer des opérations sur BD SQL Server. 
 <see cref="T:RAMQ.AccesDonnees.IBasesDonnees" />.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Pierre Audet<br/>
 Date   : 2006-09-15<br/>
 Description: Version originale sous le framework .NET 1.1<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-02-25<br/>
 Description:  Création de la version V2 de ce module (Copie de la 
               version CISEL)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Alexandre Chaussé-Paradis<br/>
 Date   : 2011-03-01<br/>
 Description:  Création de la version V4 de ce module (basé sur V2)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.BDSql.SqlNatif.ParamConnexion">
 <summary>
 Obtient ou défini l'objet <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
 servant de constructeur de chaine de connection
 </summary>
 <value><see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /></value>
 <returns><see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /></returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDSql.SqlNatif.#ctor(System.String)">
 <summary>
 Constructeur de la classe. 
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDSql.SqlNatif.#ctor(System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <param name="_strSQL"> SQL à exécuter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDSql.SqlNatif.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructeur de la classe. Fait les initialisations de base et du SQL
 et du nom de la table
 </summary>
 <param name="_strNomFichUdl"> Nom du fichier UDL pour la connexion </param>
 <param name="_strSQL"> SQL à exécuter </param>
 <param name="_strNomTable"> Nom donné à la table dans un DataSet </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDSql.SqlNatif.ObtnDelmParam(System.String)">
 <summary>
 Propriété permettant d'obtenir le délimiteur des paramètres transmis
 à une commande SQL en fonction de son type de connection
 </summary>
 <param name="_strNomParam">Nom de clé du paramètre</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDSql.SqlNatif.InitialiserConxn">
 <summary>
 Permet la création de la connexion.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDSql.SqlNatif.Modifier(System.Data.DataSet,System.Int32)">
 <summary>
 Permet d'appeler la méthode "Update" en utilisant le type le
 DataAdapter correspondand au provider ADO.NET utilisé.
 </summary>
 <param name="_dsDonne">Le Dataset à modifier</param>
 <param name="_intTailleLot">Taille du regroupement des données pour
 une mise à jour par lot </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.BDSql.SqlNatif.Remplir(System.Data.DataSet)">
 <summary>
 Permet d'appeler la méthode "Fill" en utilisant le DataAdapter
 correspondant au provider ADO.NET utilisé.
 </summary>
 <param name="_dsDonne">Le Dataset à modifier</param>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.RepositoryCurseur`1">
 <summary> 
 Classe représentant un objet riche pouvant être assigné à un "schéma"
 d'un élément retourné par les requêtes à la Base de Données.
 <see cref="T:RAMQ.AccesDonnees.IRepository`1"/>
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-06-20<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.AccesDonnees.RepositoryCurseur`1.ColctItem">
 <summary>
 Propriété contenant la liste des items pour le type générique T
 </summary>
 <value></value>
 <returns>Liste du type Générique</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.#ctor">
 <summary>
 Constructeur par défaut (vide)
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.#ctor(System.Collections.Generic.List{`0})">
 <summary>
 Constructeur permettant d'assigner la liste d'objet
 </summary>
 <param name="_colctObjGenrq"></param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.Ajouter(`0)">
 <summary>
 Méthode permettant d'ajouter un item générique à la liste
 </summary>
 <param name="_objGenrq">Élément générique</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.Ajouter(System.Collections.Generic.List{`0})">
 <summary>
 Méthode permettant d'ajouter une collection d'item générique à la liste
 </summary>
 <param name="_colctGenrq">Collection d'éléments générique</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.Supprimer(`0)">
 <summary>
 Méthode permettant de supprimer un item de la liste
 </summary>
 <param name="_objGenrq">Élément générique</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.Supprimer(System.Int32)">
 <summary>
 Méthode permettant de supprimer un item de la liste à la position désignée
 </summary>
 <param name="_intIndex">Position de l'item à supprimer</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.Supprimer(System.Int32,System.Int32)">
 <summary>
 Méthode permettant de supprimer un nombre d'items de la liste à partir de la position désignée 
 </summary>
 <param name="_intIndex">Position de l'item à supprimer</param>
 <param name="_intCount">Nombre d'item à supprimer</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.SupprimerTous">
 <summary>
 Méthode permettan de supprimer tous les items présent dans la liste
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.RechercherParExpr(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
 <summary>
 Rechercher des items selon l'expression désignée
 </summary>
 <param name="_exprPredicat">L'expression de recherche</param>
 <returns>Résultat de requête pour le type générique (voir <see cref="T:System.Linq.IQueryable`1"/>)</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.RechercherParId(System.Int32)">
 <summary>
 Recherche un item générique à partir de son ID
 </summary>
 <param name="_intId">ID de l'item à retourner</param>
 <returns>Item générique trouvé</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.RechercherTous">
 <summary>
 Retourne tous les items de la liste
 </summary>
 <returns>Résultat de requête pour le type générique (voir <see cref="T:System.Linq.IQueryable`1"/>)</returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.RepositoryCurseur`1.RechercherTousAsEnumerable">
 <summary>
 Retourne tous les items de la liste en tant qu'énumérable
 </summary>
 <returns>Résultat de requête pour le type générique en tant qu'énumérable</returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.AccesDonnees.Procedure">
 <summary>
 Classe de fonctionnalités pour l'exécution des procédures stockées
 de la base de données. Cette interface hérite du type <see cref="T:RAMQ.AccesDonnees.IProcedure" />.
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Sylvain Bussières<br/>
 Date   : 2005-05-06<br/>
 Description: Version originale sous le framework .NET 1.1<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Mario Grenier<br/>
 Date   : 2009-02-25<br/>
 Description:  Création de la version V2 de ce module (Copie de la 
               version CISEL)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : Alexandre Chaussé-Paradis<br/>
 Date   : 2011-03-01<br/>
 Description:  Création de la version V4 de ce module (basé sur V2)<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>    
 </remarks>
</member>
<member name="F:RAMQ.AccesDonnees.Procedure.colctParametres">
 <summary>
 Collection des paramètres
 </summary>
 <remarks></remarks>
</member>
<member name="F:RAMQ.AccesDonnees.Procedure.strNom">
 <summary>
 Nom de la procedure
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.Procedure.Nom">
 <summary>
 Nom de la procedure   
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.Procedure.ColctParam">
 <summary>
 Collection des paramètres  
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.AccesDonnees.Procedure.Item(System.String)">
 <summary>
 Item de la collection de paramètre à l'index spécifié  
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.#ctor">
 <summary>
 Constructeur de la classe. Fait les initialisations
 </summary>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.CreerParam(System.String,System.Object)">
 <summary>
 Propriété permettant de créer un paramètre selon le type désiré
 </summary>
 <param name="_strNom">Nom du paramètre</param>
 <param name="_objTyp">DbType associé à l'objet</param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.Ajouter(System.Data.IDbDataParameter)">
 <summary>
 Ajouter un paramètre dans la collection des paramètres
 </summary>
 <param name="_objParam"> Paramètre à ajouter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom"> Nom du paramètre à ajouter </param>
 <param name="_objType"> Type <see cref="T:System.Data.DbType" /> (ou celui du parameter) du paramètre à ajouter </param>
 <param name="_intLongueur"> Longueur du paramètre à ajouter </param>
 <param name="_objDirection"> Direction du paramètre à ajouter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.Ajouter(System.String,System.Object,System.Data.ParameterDirection)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom"> Nom du paramètre à ajouter </param>
 <param name="_objType"> Type <see cref="T:System.Data.DbType" /> (ou celui du parameter) du paramètre à ajouter </param>
 <param name="_objDirection"> Direction du paramètre à ajouter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.Ajouter(System.String,System.Object,System.Data.ParameterDirection,System.Object)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom"> Nom du paramètre à ajouter </param>
 <param name="_objType"> Type <see cref="T:System.Data.DbType" /> (ou celui du parameter) du paramètre à ajouter </param>
 <param name="_objDirection"> Direction du paramètre à ajouter </param>
 <param name="_objValeur"> Valeur du paramètre à ajouter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.Ajouter(System.String,System.Object,System.Int32,System.Data.ParameterDirection,System.Object)">
 <summary>
 Créer un nouveau paramètre et l'ajouter dans la collection
 des paramètres
 </summary>
 <param name="_strNom"> Nom du paramètre à ajouter </param>
 <param name="_objType"> Type <see cref="T:System.Data.DbType" /> (ou celui du parameter) du paramètre à ajouter </param>
 <param name="_intLongueur"> Longueur du paramètre à ajouter </param>
 <param name="_objDirection"> Direction du paramètre à ajouter </param>
 <param name="_objValeur"> Valeur du paramètre à ajouter </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.Supprimer(System.String)">
 <summary>
 Supprimer un paramètre de la collection des paramètres
 </summary>
 <param name="_strNom"> Nom du paramètre à supprimer </param>
 <remarks></remarks>
</member>
<member name="M:RAMQ.AccesDonnees.Procedure.GetEnumerator">
 <summary>
     Retour l'enumérateur de la collections de paramètres
 </summary>
 <returns> 
     IEnumerator  :   Énumérateur de la collection de paramètres
 </returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.Attribut.ValeurEntite">
 <summary>
 Classe définissant les attributs d'une valeur appartenant à l'entité
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.Attribut.ValeurEntite.IsRequired">
 <summary>
 Précise si la valeur est requise dans l'entite
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.Attribut.ValeurEntite.TypeSorti">
 <summary>
     Type de sorti du paramètre.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.Attribut.ValeurEntite.Direction">
 <summary>
     Direction du paramètre.
 </summary>
 <remarks></remarks>
</member>
<member name="T:RAMQ.Attribut.IValeurEntite">
 <summary>
 Interface définissant les attributs d'une valeur appartenant à l'entité
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.Attribut.IValeurEntite.IsRequired">
 <summary>
 Précise si la valeur est requise dans l'entite
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.Attribut.IValeurEntite.TypeSorti">
 <summary>
     Type de sorti du paramètre.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RAMQ.Attribut.IValeurEntite.Direction">
 <summary>
     Direction du paramètre.
 </summary>
 <remarks></remarks>
</member>
<member name="T:RAMQ.Attribut.Entite">
 <summary>
 Classe définissant les attributs d'une entité
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.Attribut.Entite.Namespace">
 <summary>
 Namespace de l'entité
 </summary>
 <remarks>
 Le namespace doit être détruit car il semble y avoir une 
 incompatibilité avec le mappage via XmlSerializer
 </remarks>
</member>
<member name="T:RAMQ.Attribut.IEntite">
 <summary>
 Interface définissant les attributs d'une entité d'objet
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="P:RAMQ.Attribut.IEntite.Namespace">
 <summary>
 Namespace de l'entité
 </summary>
 <remarks></remarks>
</member>
<member name="T:RAMQ.Enumeration.EnumTypeParamSorti">
 <summary>
 Énumération des types de paramètres de sorti.
 </summary>
 <remarks></remarks>
</member>
<member name="T:RAMQ.Enumeration.EnumTypeFormatDB">
 <summary>
 Énumération du format de l'encodage dans la base de données
 </summary>
 <remarks></remarks>
</member>
<member name="T:RAMQ.Extensions.CollectionExtn">
 <summary>
 Définition du module qui ajoute des méthodes d'extensions à l'interface
 <see cref="T:System.Collections.Generic.IEnumerable`1" /> du Framework .NET. 
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.ToDataSet``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Permet de transformer une collection générique en Dataset
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_colctEnum"> Collection typée </param>
 <returns> Dataset basé sur la collection typée </returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.vb" region="ToDataSet"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.cs" region="ToDataSet"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.ToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.String)">
 <summary>
 Permet de transformer une collection générique en Dataset
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_colctEnum"> Collection typée </param>
 <param name="_strNomDataSet"> Nom du dataset </param>
 <returns> Dataset basé sur la collection typée </returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.vb" region="ToDataSetNom"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.cs" region="ToDataSetNom"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.ToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
 <summary>
 Permet de transformer une collection générique en Dataset
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_colctEnum"> Collection typée </param>
 <param name="_strNomDataSet"> Nom du dataset (à retourner) </param>
 <param name="_strNomTable"> Nom du datatable (inclus dans le datatset à retourner) </param>
 <returns> Dataset basé sur la collection typée </returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.vb" region="ToDataSetNomTable"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.cs" region="ToDataSetNomTable"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
 <summary>
 Permet de transformer une collection générique en DataTable
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_colctEnum"> Collection typée </param>
 <param name="_strNomTable"> Nom du DataTable (à retourner) </param>
 <returns> DataTable basé sur la collection typée </returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.vb" region="ToDataTableNom"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.cs" region="ToDataTableNom"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Permet de transformer une collection générique en Dataset
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_colctEnum"> Collection typée </param>
 <returns> Datatable basé sur la collection typée </returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.vb" region="ToDataTable"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\CollectionExtn.cs" region="ToDataTable"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.CreerDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Reflection.PropertyInfo[])">
 <summary>
 Fonction Permettant de créer un Datatable basé sur une collection générique typée
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_colctDonne"> Collection typée </param>
 <param name="_objProps"> Information des propriétés de l'objet </param>
 <returns> Datatable basé sur la collection typée </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.CreerDataTable``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Reflection.PropertyInfo[])">
 <summary>
 Fonction Permettant de créer un Datatable basé sur une collection générique typée
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_strNomTable"> Nom de la table (à retourner) </param>
 <param name="_colctDonne"> Collection typée </param>
 <param name="_objProps"> Information des propriétés de l'objet </param>
 <returns> Datatable basé sur la collection typée </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.RemplirDataRow``1(System.Data.DataRow,``0,System.Reflection.PropertyInfo[])">
 <summary>
 Fonction permettant de créer un Datarow basé sur un objet générique typée
 </summary>
 <typeparam name="T"> Type de l'élément </typeparam>
 <param name="_rowDonne">DataRow servant à remplir</param>
 <param name="_objElem"> objet typé </param>
 <param name="_objProps"> Information des propriétés de l'objet </param>
 <returns> Datarow basé sur l'objet générique typée </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.CollectionExtn.RemplirDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
 <summary>
 Fonction permettant de remplir un datatable à partir d'une 
 collection générique typée
 </summary>
 <typeparam name="T"> Type de la collection </typeparam>
 <param name="_colctDonne"> Collection typée </param>
 <param name="_strNomTable"> Nom de la table </param>
 <returns> Datatable </returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.Extensions.DataExtn">
 <summary>
 Définition du module qui ajoute des méthodes d'extensions à l'interface
 <see cref="T:System.Data.DataTable" /> et <see cref="T:System.Data.DataSet" />
 du Framework .NET. 
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="M:RAMQ.Extensions.DataExtn.ToListe``1(System.Data.DataTable)">
 <summary>
 Retourne une liste générique typée basé sur le <see cref="T:System.Data.DataTable"/>.
 La liste typée contiendra un mappage des données de cette table vers le type 
 de la classe "T" désirée
 </summary>
 <typeparam name="T"> Type de la classe à utiliser pour le mappage </typeparam>
 <param name="_dtDonne"> DataTable </param>
 <returns> Liste générique contenant les informations mappées </returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\DataExtn.vb" region="DataTableListe"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\DataExtn.cs" region="DataTableListe"></code>
 </example>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.Extensions.DataExtn.ToListe``1(System.Data.DataSet)">
 <summary>
 Retourne une liste générique typée basé sur le <see cref="T:System.Data.DataSet"/>.
 La liste typée contiendra un mappage des données de ce dataset vers le type 
 de la classe "T" désirée
 </summary>
 <typeparam name="T"> Type de la classe à utiliser pour le mappage </typeparam>
 <param name="_dsDonne"> DataSet </param>
 <returns> Liste générique contenant les informations mappées </returns>
 <example>
 <code lang="VB.NET" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\DataExtn.vb" region="DataSetListe"></code>
 <code lang="C#" source="\\Corpoque\APPLI\Unit\COM\COM_LIV40\VbDotNet\Exemple\DataExtn.cs" region="DataSetListe"></code>
 </example>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="T:RAMQ.Extensions.DataReaderExtn">
 <summary>
 Définition du module qui ajoute des méthodes d'extensions à
 <see cref="T:System.Data.IDataReader" /> du Framework .NET. 
 </summary>
 <remarks>
 Auteur : Alexandre Chaussé-Paradis <br/>
 Date   : 2011-03-01<br/>
 <br/>
 Historique des modifications<br/>
 ------------------------------------------------------------------------------<br/>
 Auteur : [Auteur]<br/>
 Date   : [aaaa-mm-jj]<br/>
 Description:<br/>
 <br/>
 </remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ToListe``1(System.Data.IDataReader)">
 <summary>
 Retourne une liste générique typée basé sur le Datareader. La liste
 typée contiendra un mappage des données du datareader vers le type 
 de la classe "T" désirée
 </summary>
 <typeparam name="T"> Type de la classe à utiliser pour le mappage </typeparam>
 <param name="_drDonne"> DataReader </param>
 <returns> Liste générique contenant les informations mappées </returns>
 <remarks>
 <p style="color:#C62">
   <strong><i><u>A Noter : l'utilisation de cette fonctionnalité ne doit
                 pas être prévu dans un contexte de performance</u></i></strong>
 </p>
 </remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ToDataSet(System.Data.IDataReader,System.String,System.String,System.String)">
 <summary>
 Retourne un DataSet basé sur le Datareader
 </summary>
 <param name="_drDonne"> DataReader </param>
 <param name="_strNomDataSet"> Nom du DataSet </param>
 <param name="_strNamespaceDataSet"> Namespace du DataSet </param>
 <param name="_strNomDataTable"> Nom de la Table </param>
 <returns> DataSet </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ToDataSet(System.Data.IDataReader,System.String,System.String)">
 <summary>
 Retourne un DataSet basé sur le Datareader
 </summary>
 <param name="_drDonne"> DataReader </param>
 <param name="_strNomDataSet"> Nom du DataSet </param>
 <param name="_strNomDataTable"> Nom de la Table </param>
 <returns> DataSet </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ToDataSet(System.Data.IDataReader,System.String)">
 <summary>
 Retourne un DataSet basé sur le Datareader
 </summary>
 <param name="_drDonne"> DataReader </param>
 <param name="_strNomDataSet"> Nom du Dataset </param>
 <returns> DataSet </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ToDataSet(System.Data.IDataReader)">
 <summary>
 Retourne un DataSet basé sur le Datareader
 </summary>
 <param name="_drDonne"> DataReader </param>
 <returns> DataSet </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ToDataTable(System.Data.IDataReader,System.String)">
 <summary>
 Retourne un DataTable basé sur le Datareader
 </summary>
 <param name="_drDonne"> DataReader </param>
 <param name="_strNomDataTable"> Nom de la table </param>
 <returns> DataTable </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ToDataTable(System.Data.IDataReader)">
 <summary>
 Retourne un DataTable basé sur le Datareader
 </summary>
 <param name="_drDonne"> DataReader </param>
 <returns> DataTable </returns>
 <remarks></remarks>
</member>
<member name="M:RAMQ.Extensions.DataReaderExtn.ConvertirDonneEnColctObjMetie``1(System.Data.IDataReader)">
 <summary>
 Méthode qui permet de convertir un DataReader en une collection de type T.
 </summary>
 <typeparam name="T">Type générique</typeparam>
 <param name="_drDonne">DataReader des données à tranférer dans la collection</param>
 <returns>Collection de type T contenant les données provenant du DataReader.</returns>
 <remarks></remarks>
</member>
<member name="T:RAMQ.My.Resources.Resources">
<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ResourceManager">
<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.Culture">
<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleCodeVolet">
<summary>
  Recherche une chaîne localisée semblable à CleCodeVolet.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleCodeVoletAssureur">
<summary>
  Recherche une chaîne localisée semblable à Assureur.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleCodeVoletDSQ">
<summary>
  Recherche une chaîne localisée semblable à DSQ.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleODBCDatabaseTera">
<summary>
  Recherche une chaîne localisée semblable à DefaultDatabase.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleODBCDBCNameTera">
<summary>
  Recherche une chaîne localisée semblable à DBCName.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleRegAbsnt">
<summary>
  Recherche une chaîne localisée semblable à La chaine {0}\{1}\{2} est absente des régistres.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleRegODBC">
<summary>
  Recherche une chaîne localisée semblable à SOFTWARE\ODBC\ODBC.INI\.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CleRegODBCx86">
<summary>
  Recherche une chaîne localisée semblable à SOFTWARE\Wow6432Node\ODBC\ODBC.INI\.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CnnDataSource">
<summary>
  Recherche une chaîne localisée semblable à data source.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CnnIdent">
<summary>
  Recherche une chaîne localisée semblable à user id.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CnnInitialCatalogSql">
<summary>
  Recherche une chaîne localisée semblable à Initial Catalog.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CnnLifetimeSql">
<summary>
  Recherche une chaîne localisée semblable à Connection Lifetime.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CnnMdp">
<summary>
  Recherche une chaîne localisée semblable à password.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CnnTrustedConxnSql">
<summary>
  Recherche une chaîne localisée semblable à Trusted_Connection.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.CredCache">
<summary>
  Recherche une chaîne localisée semblable à CredCache.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.DelmParamOle">
<summary>
  Recherche une chaîne localisée semblable à ?.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.DelmParamOra">
<summary>
  Recherche une chaîne localisée semblable à :.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.DelmParamSQL">
<summary>
  Recherche une chaîne localisée semblable à @.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.DelmParamTera">
<summary>
  Recherche une chaîne localisée semblable à ?.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ErrAttrEntite">
<summary>
  Recherche une chaîne localisée semblable à La classe passé en paramètre n&apos;utilise pas l&apos;attribut &quot;Entite&quot;..
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ErrFichUdlAbsent">
<summary>
  Recherche une chaîne localisée semblable à Le fichier UDL est absent ou ne peut être lu..
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ErrParamAbsent">
<summary>
  Recherche une chaîne localisée semblable à Le select possède une clause WHERE, mais aucun paramètre n&apos;a été spécifié.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ErrValeurPropriete">
<summary>
  Recherche une chaîne localisée semblable à Impossible de trouver la propriété &quot;&quot;Value&quot;&quot; dans le type &quot;&quot;{0}&quot;&quot;.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ErrValParamNonSuppo">
<summary>
  Recherche une chaîne localisée semblable à La valeur &apos;{0}&apos; du paramètre &apos;{1}&apos; n&apos;est pas supportée..
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.MsgExcedNbrMaxOccTablo">
<summary>
  Recherche une chaîne localisée semblable à La valeur de NbrMaxOccTablo excède {0}..
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.MsgNbrMaxOccTabloInfeUn">
<summary>
  Recherche une chaîne localisée semblable à La valeur de NbrMaxOccTablo est inférieure à 1..
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.NbrCarCodRetouMax">
<summary>
  Recherche une chaîne localisée semblable à 4000.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.NbrCodRetouMax">
<summary>
  Recherche une chaîne localisée semblable à 100.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.NbrMaxAutorOccTablo">
<summary>
  Recherche une chaîne localisée semblable à 10500.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.NbrMaxDefauOccTablo">
<summary>
  Recherche une chaîne localisée semblable à 9999.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.NbrMinExpirCacheUDL">
<summary>
  Recherche une chaîne localisée semblable à 60.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.NoErrOK">
<summary>
  Recherche une chaîne localisée semblable à 0.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ParamInvalide">
<summary>
  Recherche une chaîne localisée semblable à Le paramètre est invalide..
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ParamObligatoire">
<summary>
  Recherche une chaîne localisée semblable à Paramètre Obligatoire.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.RpertFichUDL">
<summary>
  Recherche une chaîne localisée semblable à D:\AuthnDonne\{0}\{1}.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.TimeOutCmd">
<summary>
  Recherche une chaîne localisée semblable à 300.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.TypeNullable">
<summary>
  Recherche une chaîne localisée semblable à Le type de la liste doit être Nullable..
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauConnectionLifetime">
<summary>
  Recherche une chaîne localisée semblable à 0.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauConnectionPoolingTimeoutTera">
<summary>
  Recherche une chaîne localisée semblable à 60.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauConnectionTimeoutOra">
<summary>
  Recherche une chaîne localisée semblable à 15.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauConnectionTimeoutSql">
<summary>
  Recherche une chaîne localisée semblable à 30.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauConnectionTimeoutTera">
<summary>
  Recherche une chaîne localisée semblable à 20.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauDecrPoolSizeOra">
<summary>
  Recherche une chaîne localisée semblable à 1.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauEnlist">
<summary>
  Recherche une chaîne localisée semblable à True.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauIncrPoolSizeOra">
<summary>
  Recherche une chaîne localisée semblable à 5.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauInitialCatalogSql">
<summary>
  Recherche une chaîne localisée semblable à .
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauMaxPoolSizeOra">
<summary>
  Recherche une chaîne localisée semblable à 100.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauMaxPoolSizeSql">
<summary>
  Recherche une chaîne localisée semblable à 20.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauMaxPoolSizeTera">
<summary>
  Recherche une chaîne localisée semblable à 100.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauMinPoolSizeOra">
<summary>
  Recherche une chaîne localisée semblable à 1.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauMinPoolSizeSql">
<summary>
  Recherche une chaîne localisée semblable à 0.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauMinPoolSizeTera">
<summary>
  Recherche une chaîne localisée semblable à 0.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauPersistSecurityInfo">
<summary>
  Recherche une chaîne localisée semblable à False.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauPooling">
<summary>
  Recherche une chaîne localisée semblable à True.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauSelfTuning">
<summary>
  Recherche une chaîne localisée semblable à False.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauSessionCharacterSetTera">
<summary>
  Recherche une chaîne localisée semblable à ASCII.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauSessionModeTera">
<summary>
  Recherche une chaîne localisée semblable à DEFAULT.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauTrustedConxnSql">
<summary>
  Recherche une chaîne localisée semblable à True.
</summary>
</member>
<member name="P:RAMQ.My.Resources.Resources.ValDefauValidateConnectionOra">
<summary>
  Recherche une chaîne localisée semblable à False.
</summary>
</member>
</members>
</doc>
